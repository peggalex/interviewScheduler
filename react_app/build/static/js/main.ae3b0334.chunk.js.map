{"version":3,"sources":["Utilities.tsx","Icons.tsx","Configuration.tsx","Schedule.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["RestfulType","ChevronLeft","focusable","className","role","xmlns","viewBox","fill","d","Icons","ChevronDown","style","transform","ChevronUp","Calendar","width","height","stroke","strokeWidth","strokeLinecap","strokeLinejoin","x","y","rx","ry","x1","y1","x2","y2","Upload","points","CheckMark","color","PlusSign","CrossSign","Generate","Coffee","Edit","CallAPIToJson","url","method","body","headers","Promise","resolve","reject","CallAPI","then","response","a","ok","json","replace","fullUrl","fetch","CallAPIJsonToJson","JSON","stringify","download","mimetype","data","filename","link","document","createElement","href","encodeURIComponent","click","ColumnType","ColumnTypeToStr","colType","STRING","INT","DATETIME","Error","tables","Table","name","endpoint","desc","columns","mandatory","dependencies","push","this","col","addColumn","table","tableData","every","t","isLoaded","length","conventionTimesTable","type","companyNameCol","roomNameCol","companyRoomsTable","roomInterviewsTable","attendeeCol","attendeeTable","coffeeChatsTable","FormatColumn","date","Date","parse","month","toLocaleString","mins","getMinutes","toString","padStart","getDate","getHours","FileUpload","updateTableData","isLoading","setIsLoading","fileRef","React","useRef","useState","fileName","setFileName","fileElement","current","files","setCustomValidity","reportValidity","file","FormData","append","POST","alert","catch","res","console","log","finally","useEffect","buttWorks","isDependenciesLoaded","id","onChange","sendFile","ref","accept","disabled","ColumnConfig","descs","join","TableConfig","isSelected","scrollTo","getValues","values","setValues","shouldExpand","isExpanded","setIsExpanded","elRef","scrollIntoView","behavior","block","onClick","map","i","c","r","k","ConfigurationPage","selectedTable","selectTable","Interval","start","end","lengthMins","intervalStr","Appointment","att","companyName","roomName","iApp","interval","isCoffeeChat","fromStr","getCCPref","schedule","attId","ccCandidates","companies","coffeeChat","candidates","indexOf","addHours","hours","newDate","setHours","getHeadings","conventionTimes","time","headings","dateToTimeStr","Intl","DateTimeFormat","hour","minute","hour12","format","dateToStr","day","ATT_TO_APPS","ROOM_TO_COMPANY","ATT_TO_INTERVIEWROOMS","ATT_TO_COFFEECHATROOMS","ROOM_TO_COFFEECHATAPPS","DRAGGING_APP","ScheduleCompany","swapFunc","dragInterviewApp","ev","el","target","attStr","dataset","timeStr","roomStr","room","appStr","app","querySelectorAll","forEach","row","classList","add","dropInterviewApp","preventDefault","currentTarget","otherAttStr","otherTimeStr","otherRoomStr","otherAppStr","s","parseInt","undefined","att1","att2","app1","app2","getAppStr","window","confirm","allowInterviewDrop","dragInterviewAppEnd","remove","Object","entries","rooms","timeToApp","addedInCoffeeChat","candidatesNotSelected","Set","apps","delete","heading","lengthPercent","startPercent","attendees","left","draggable","onDragStart","onDragEnd","onDrop","onDragOver","prefs","Array","from","ScheduleCoffeeChat","dragCCApp","dropCCApp","allowCCDrop","dragCCAppEnd","cc","ccPref","includes","ScheduleAttendees","attIdStr","timeToBreak","size","sort","b","interviewRoomsNotSelected","coffeeChatRoomsNotSelected","commitments","breakStr","title","roomsNotSelected","SchedulePage","scheduleObj","setScheduleObj","swap","GET","noAppointmentsNotEmpty","noAppointments","noAttendeeesChosen","toFixed","varNoAppointments","totalUtility","get","exec","text","CallAPIJsonToDownloadCSV","App","configPageSelected","setConfigPageSelected","canGenerate","setCanGenerate","tableDataInit","setTableData","getData","tableDataOld","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ae3b0334.chunk.js","sourcesContent":["import { rejects } from 'assert';\r\nimport React from 'react';\r\n\r\nexport const EnumArray = (e: any): string[] => \r\n    Object.values(e).filter((s: any) => isNaN(s)) as string[];\r\n\r\n\r\nexport enum RestfulType {\r\n    POST,\r\n    GET,\r\n    PUT\r\n}\r\n\r\nexport function CallAPIToJson(\r\n    url: string, \r\n    method: RestfulType, \r\n    body: any = null,\r\n    headers: any = {}\r\n): Promise<any> {\r\n    return new Promise((resolve, reject) => \r\n        CallAPI(url, method, body, headers)\r\n            .then(async (response) => {\r\n                if (!response.ok){\r\n                    reject(await response.json());\r\n                } else {\r\n                    resolve(await response.json());\r\n                }\r\n            })\r\n    );\r\n}\r\n\r\nexport function CallAPIJsonToDownloadCSV(\r\n    url: string, \r\n    method: RestfulType, \r\n    json: any = null,\r\n): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n        CallAPI(url, method, JSON.stringify(json), {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n        })\r\n        .then(async (res) => {\r\n            if (!res.ok){\r\n                reject(alert(await res.json()))\r\n            } else {\r\n                let mimetype = res.headers.get('Content-Type')!;\r\n                let filename = /.+filename=\"([^\"]+)\"/g.exec(\r\n                    res.headers.get('Content-Disposition')!\r\n                )![1];\r\n\r\n                download(\r\n                    mimetype, \r\n                    await res.text(),\r\n                    filename\r\n                );\r\n                resolve();\r\n            }\r\n        })\r\n    });\r\n\r\n}\r\n\r\nexport function CallAPI(\r\n    url: string, \r\n    method: RestfulType, \r\n    body: any = null,\r\n    headers: any = {}\r\n): Promise<Response> {\r\n\turl = url.replace(/[ \\t\\n]/g, ''); // get rid of empty spaces and newlines\r\n    var fullUrl = `${process.env.PUBLIC_URL || './'}/${url}`;\r\n\treturn fetch(fullUrl, {\r\n        method: RestfulType[method],\r\n        body: body,\r\n        headers: headers\r\n\t});\r\n}\r\n\r\nexport const CallAPIJsonToJson = async (\r\n    url: string,\r\n    method: RestfulType,\r\n    body: Object\r\n) => CallAPIToJson(\r\n    url, \r\n    method, \r\n    JSON.stringify(body),\r\n    {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json'\r\n    }\r\n);\r\n\r\nfunction download(mimetype: string, data: string, filename: string) {\r\n    const link = document.createElement(\"a\");\r\n    link.href = `data:${mimetype},${encodeURIComponent(data)}`;\r\n    link.download = filename;\r\n    link.click();\r\n}\r\n\r\n//https://stackoverflow.com/questions/1322732/convert-seconds-to-hh-mm-ss-with-javascript\r\nexport const secsToHMS = (secs: number): string => {\r\n    const hourInSecs = 60*60;\r\n    let dateStr = new Date(secs * 1000).toISOString();\r\n    const endIndex = 19;\r\n    let len = 8;\r\n    if (secs < hourInSecs) len -= 3;\r\n    return dateStr.substr(endIndex - len, len);\r\n};\r\n\r\nexport enum ColumnType {\r\n    STRING,\r\n    INT,\r\n    DATETIME\r\n}\r\n\r\nexport function ColumnTypeToStr(colType: ColumnType){\r\n    switch (colType){\r\n        case ColumnType.STRING:\r\n            return 'string';\r\n        case ColumnType.INT:\r\n            return 'integer';\r\n        case ColumnType.DATETIME:\r\n            return 'datetime';\r\n        default:\r\n            throw Error(`unhandled col type for ColumnTypeToStr(): ${ColumnType}`);\r\n    }\r\n}\r\n\r\nexport interface IColumn{\r\n    name: string;\r\n    type: ColumnType;\r\n    desc?: string;\r\n    table?: Table;\r\n}\r\n\r\nexport type TableData = {[tableName: string]: string[][]};\r\n\r\nexport const tables: Table[] = [];\r\n\r\nexport class Table{\r\n    name: string;\r\n    endpoint: string;\r\n    desc: string;\r\n    columns: IColumn[];\r\n    mandatory: boolean;\r\n    dependencies: Table[];\r\n\r\n    constructor(name: string, endpoint: string, desc: string, columns: IColumn[], mandatory: boolean, dependencies?: Table[]){\r\n        tables.push(this);\r\n        this.name = name;\r\n        this.endpoint = endpoint;\r\n        this.desc = desc;\r\n        this.mandatory = mandatory;\r\n        this.dependencies = dependencies ?? [];\r\n        this.columns = [];\r\n        for (let col of columns){\r\n            this.addColumn(col);\r\n        }\r\n    }\r\n\r\n    addColumn(col: IColumn){\r\n        this.columns.push(col);\r\n        col.table = col.table ?? this; \r\n        /* if this col doesn't have a table, add this one as their table */\r\n        return this;\r\n    }\r\n\r\n    getValues(tableData: TableData){\r\n        return tableData[this.name];\r\n    }\r\n\r\n    isDependenciesLoaded(tableData: TableData){\r\n        return this.dependencies.every(t => t.isLoaded(tableData));\r\n    }\r\n\r\n    isLoaded(tableData: TableData){\r\n        return 0 < (tableData[this.name]?.length ?? -1);\r\n    }\r\n}\r\n\r\nconst conventionTimesTable: Table = new Table(\r\n    'Convention Times',\r\n    'ConventionTimes',\r\n    'This is a list of valid times for the convention.',\r\n    [\r\n        {\r\n            name: 'Start Time',\r\n            type: ColumnType.DATETIME\r\n        },\r\n        {\r\n            name: 'End Time',\r\n            type: ColumnType.DATETIME,\r\n            desc: 'must be greater than start time'\r\n        },\r\n    ],\r\n    true\r\n);\r\n\r\nconst companyNameCol: IColumn = {\r\n    name: 'Company Name',\r\n    type: ColumnType.STRING\r\n}\r\n\r\nconst roomNameCol: IColumn = {\r\n    name: 'Room Name',\r\n    type: ColumnType.STRING\r\n}\r\n\r\n\r\nconst companyRoomsTable: Table = new Table(\r\n    'Company Rooms',\r\n    'CompanyRooms',\r\n    'This is a list of companies participating, and their rooms.',\r\n    [companyNameCol, roomNameCol],\r\n    true\r\n);\r\n\r\n\r\nconst roomInterviewsTable: Table = new Table(\r\n    'Room Interviews',\r\n    'RoomInterviews',\r\n    'This is a list of rooms with interviews.',\r\n    [roomNameCol, {\r\n        name: 'Length',\r\n        type: ColumnType.INT,\r\n        desc: 'in minutes'\r\n    },    \r\n    {\r\n        name: 'Start Time',\r\n        type: ColumnType.DATETIME\r\n    },\r\n    {\r\n        name: 'End Time',\r\n        type: ColumnType.DATETIME,\r\n        desc: 'must be greater than start time'\r\n    }],\r\n    true,\r\n    [conventionTimesTable, companyRoomsTable]\r\n);\r\n\r\nconst roomBreaksTable: Table = new Table(\r\n    'Room Breaks',\r\n    'RoomBreaks',\r\n    'This is a list of room breaks.',\r\n    [\r\n        roomNameCol,\r\n        {\r\n            name: 'Start Time',\r\n            type: ColumnType.DATETIME\r\n        },\r\n        {\r\n            name: 'End Time',\r\n            type: ColumnType.DATETIME,\r\n            desc: 'must be greater than start time'\r\n        }\r\n    ],\r\n    false,\r\n    [companyRoomsTable]\r\n);\r\n\r\nconst attendeeCol: IColumn = {\r\n    name: 'Attendee ID',\r\n    type: ColumnType.STRING\r\n}\r\n\r\nconst attendeeTable: Table = new Table(\r\n    'Attendees',\r\n    'AttendeeNames',\r\n    'This is a list of attendees (students attending ASNA).',\r\n    [attendeeCol, {\r\n        name: \"Attendee Name\",\r\n        type: ColumnType.STRING\r\n    }],\r\n    true\r\n);\r\n\r\nconst attendeeBreaksTable: Table = new Table(\r\n    'Attendee Breaks',\r\n    'AttendeeBreaks',\r\n    'This is a list of attendee breaks.',\r\n    [attendeeCol,\r\n    {\r\n        name: 'Start Time',\r\n        type: ColumnType.DATETIME\r\n    },\r\n    {\r\n        name: 'End Time',\r\n        type: ColumnType.DATETIME,\r\n        desc: 'must be greater than start time'\r\n    }],\r\n    false,\r\n    [conventionTimesTable, attendeeTable]\r\n);\r\n\r\nconst attendeePrefsTable: Table = new Table(\r\n    'Attendee Preferences',\r\n    'AttendeePrefs',\r\n    'This is a list of the preferences an attendee has for a company.',\r\n    [attendeeCol, companyNameCol,\r\n    {\r\n        name: 'Preference',\r\n        type: ColumnType.INT,\r\n        desc: 'must be positive, the smaller the better'\r\n    }],\r\n    true,\r\n    [attendeeTable, companyRoomsTable]\r\n);\r\n\r\nconst interviewCandidatesTable: Table = new Table(\r\n    'Interview Candidates',\r\n    'InterviewCandidates',\r\n    'This is a list of interview candidates.',\r\n    [roomNameCol, attendeeCol],\r\n    true,\r\n    [companyRoomsTable, roomInterviewsTable, attendeeTable]\r\n);\r\n\r\nconst coffeeChatsTable: Table = new Table(\r\n    'Coffee Chats',\r\n    'CoffeeChats',\r\n    'This is a list of room coffee chats.',\r\n    [roomNameCol, \r\n    {\r\n        name: \"Capacity\",\r\n        type: ColumnType.INT,\r\n        desc: \"must be positive\"\r\n    },\r\n    {\r\n        name: 'Start Time',\r\n        type: ColumnType.DATETIME\r\n    },\r\n    {\r\n        name: 'End Time',\r\n        type: ColumnType.DATETIME,\r\n        desc: 'must be greater than start time'\r\n    }],\r\n    false,\r\n    [conventionTimesTable, companyRoomsTable]\r\n);\r\n\r\nconst coffeeChatsCandidatesTable: Table = new Table(\r\n    'Coffee Chat Candidates',\r\n    'CoffeeChatCandidates',\r\n    'This is a list of room coffee chats candidates, and the rank the company ascribes that candidate.',\r\n    [roomNameCol, attendeeCol, {\r\n        name: 'Rank',\r\n        type: ColumnType.INT,\r\n        desc: 'must be positive, the smaller the better'\r\n    }],\r\n    false,\r\n    [attendeeTable, companyRoomsTable, coffeeChatsTable]\r\n);","import React from 'react';\r\n\r\nconst ChevronLeft = <svg aria-hidden=\"true\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"chevron-left\" className=\"chevron svg-inline--fa fa-chevron-left fa-w-10\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"-96 0 512 512\"><path fill=\"currentColor\" d=\"M34.52 239.03L228.87 44.69c9.37-9.37 24.57-9.37 33.94 0l22.67 22.67c9.36 9.36 9.37 24.52.04 33.9L131.49 256l154.02 154.75c9.34 9.38 9.32 24.54-.04 33.9l-22.67 22.67c-9.37 9.37-24.57 9.37-33.94 0L34.52 272.97c-9.37-9.37-9.37-24.57 0-33.94z\" /></svg>\r\n\r\nconst Icons = {\r\n    ChevronDown: <div className=\"centerAll\" style={{ transform: \"rotate(-90deg)\"}}>{ChevronLeft}</div>,\r\n    ChevronUp: <div className=\"centerAll\" style={{ transform: \"rotate(90deg)\"}}>{ChevronLeft}</div>,\r\n    Calendar: <svg xmlns=\"http://www.w3.org/2000/svg\" width={24} height={24} viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth={2} strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"feather feather-calendar\"><rect x={3} y={4} width={18} height={18} rx={2} ry={2} /><line x1={16} y1={2} x2={16} y2={6} /><line x1={8} y1={2} x2={8} y2={6} /><line x1={3} y1={10} x2={21} y2={10} /></svg>,\r\n    Upload: <svg xmlns=\"http://www.w3.org/2000/svg\" width={24} height={24} viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth={2} strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"feather feather-upload\"><path d=\"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4\" /><g className=\"uploadArrow\"><polyline points=\"17 8 12 3 7 8\" /><line x1={12} y1={3} x2={12} y2={15} /></g></svg>,\r\n    CheckMark: <svg style={{color: 'var(--green)'}} xmlns=\"http://www.w3.org/2000/svg\" width={24} height={24} viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth={2} strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"feather feather-check-square\"><polyline points=\"9 11 12 14 22 4\" /><path d=\"M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11\" /></svg>,\r\n    PlusSign: <svg style={{color: 'var(--blue)'}} xmlns=\"http://www.w3.org/2000/svg\" width={24} height={24} viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth={2} strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"feather feather-plus-square\"><rect x={3} y={3} width={18} height={18} rx={2} ry={2} /><line x1={12} y1={8} x2={12} y2={16} /><line x1={8} y1={12} x2={16} y2={12} /></svg>,\r\n    CrossSign: <svg style={{color: 'var(--red)'}} xmlns=\"http://www.w3.org/2000/svg\" width={24} height={24} viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth={2} strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"feather feather-x-square\"><rect x={3} y={3} width={18} height={18} rx={2} ry={2} /><line x1={9} y1={9} x2={15} y2={15} /><line x1={15} y1={9} x2={9} y2={15} /></svg>,\r\n    Generate: <svg xmlns=\"http://www.w3.org/2000/svg\" width={24} height={24} viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth={2} strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"feather feather-refresh-cw\"><polyline points=\"23 4 23 10 17 10\" /><polyline points=\"1 20 1 14 7 14\" /><path d=\"M3.51 9a9 9 0 0 1 14.85-3.36L23 10M1 14l4.64 4.36A9 9 0 0 0 20.49 15\" /></svg>,\r\n    Coffee: <svg xmlns=\"http://www.w3.org/2000/svg\" width={24} height={24} viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth={2} strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"feather feather-coffee\"><path d=\"M18 8h1a4 4 0 0 1 0 8h-1\" /><path d=\"M2 8h16v9a4 4 0 0 1-4 4H6a4 4 0 0 1-4-4V8z\" /><line x1={6} y1={1} x2={6} y2={4} /><line x1={10} y1={1} x2={10} y2={4} /><line x1={14} y1={1} x2={14} y2={4} /></svg>,\r\n    Edit: <svg xmlns=\"http://www.w3.org/2000/svg\" width={24} height={24} viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth={2} strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"feather feather-edit\"><path d=\"M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7\" /><path className=\"editPen\" d=\"M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z\" /></svg>,\r\n\r\n};\r\n\r\nexport default Icons","import React from 'react';\r\nimport Icons from './Icons';\r\nimport './styles/Configuration.css';\r\nimport { CallAPIToJson, ColumnType, ColumnTypeToStr, IColumn, RestfulType, Table, TableData, tables } from './Utilities';\r\n\r\nfunction FormatColumn(col: string, colType: ColumnType){\r\n    switch (colType){\r\n        case ColumnType.STRING:\r\n        case ColumnType.INT:\r\n            return col;\r\n        case ColumnType.DATETIME:\r\n            let date = new Date(Date.parse(col));\r\n            let month = date.toLocaleString('default', { month: 'short' });\r\n            let mins = date.getMinutes().toString().padStart(2, '0');\r\n            return `${month} ${date.getDate()}, ${date.getHours()}:${mins}`;\r\n        default:\r\n            throw Error(`unhandled col type for FormatColumn(): ${ColumnType}`);\r\n    }\r\n}\r\n\r\nfunction FileUpload({table, tableData, updateTableData, isLoading, setIsLoading}: {\r\n    table: Table, \r\n    tableData: TableData, \r\n    updateTableData: (td: TableData) => void,\r\n    isLoading: boolean,\r\n    setIsLoading: (isLoading: boolean) => void\r\n}): JSX.Element {\r\n    const fileRef = React.useRef(null as HTMLInputElement|null);\r\n    const [fileName, setFileName] = React.useState(\"\");\r\n\r\n    async function sendFile(){\r\n        let fileElement = fileRef.current;\r\n        if (fileElement == null){\r\n            return;\r\n        }\r\n        let files = fileElement.files;\r\n\r\n        if (files == null || files.length == 0) {\r\n            fileElement.setCustomValidity(\"Please select file\");\r\n            return fileElement.reportValidity();\r\n        } else {\r\n            fileElement.setCustomValidity(\"\");\r\n        }\r\n        let file = files[0];\r\n        \r\n        var data = new FormData();\r\n        data.append('table', file);\r\n        \r\n        setIsLoading(true);\r\n        \r\n        CallAPIToJson(\r\n            `/set${table.endpoint}`, \r\n            RestfulType.POST, data\r\n        ).then(({data}: {data: string[][]}) => {\r\n            alert(`Uploaded table: ${table.name}`);\r\n            updateTableData(tableData);\r\n        }).catch((res)=>{\r\n            console.log(\"res\", res);\r\n            alert(res[\"error\"]);\r\n        }).finally(()=>{\r\n            setIsLoading(false);\r\n        });\r\n    }\r\n\r\n    function onFileChange(){\r\n        let fileElement = fileRef.current;\r\n        if (fileElement == null){\r\n            return;\r\n        }\r\n        let files = fileElement.files;\r\n\r\n        if (files != null && 0 < files.length) {\r\n            setFileName(files[0].name);    \r\n            sendFile();  \r\n        } else {\r\n            setFileName(\"\");      \r\n        }\r\n    }\r\n\r\n    React.useEffect(\r\n        ()=>{setFileName(\"\")}, \r\n        [JSON.stringify(tableData)]\r\n    )\r\n\r\n    let buttWorks = table.isDependenciesLoaded(tableData);\r\n\r\n    return isLoading ? <div className=\"loader\"></div> : <>\r\n        <label id=\"htmlUploadContainer\">\r\n            <input \r\n                onChange={onFileChange} \r\n                ref={fileRef} \r\n                name=\"file\" \r\n                accept=\".csv\" \r\n                type=\"file\"\r\n                disabled={!buttWorks}\r\n            />\r\n            <div id=\"htmlUpload\" className={`col centerCross clickable whiteWhenHovered ${buttWorks ? \"\" : \"disabled\"}`}>\r\n                <div className=\"row centerCross\">\r\n                    {Icons.Upload} \r\n                    <p>choose file</p>\r\n                </div>\r\n                <p>(.csv)</p>\r\n            </div>\r\n        </label>\r\n        <p><i>\r\n            {\r\n                buttWorks ? \r\n                    (fileName == \"\" ? \"No file selected\" : fileName) : \r\n                    \"dependencies not loaded\"\r\n            }\r\n        </i></p>\r\n    </>\r\n}\r\n\r\nfunction ColumnConfig({table, col}: {table: Table, col: IColumn}){\r\n\r\n    let descs = [ColumnTypeToStr(col.type)];\r\n    if (table != col.table){\r\n        descs.push(`must be defined in the ${col.table!.name} table`)\r\n    }\r\n    if (col.desc){\r\n        descs.push(col.desc);\r\n    }\r\n\r\n    return <div className='column'>\r\n        <b>{col.name}</b> • {descs.join(', ')}\r\n    </div>\r\n}\r\n\r\nfunction TableConfig(\r\n    {table, isSelected, scrollTo, tableData, updateTableData}: \r\n    {table: Table, isSelected: boolean, scrollTo: (t: Table|null) => void, tableData: TableData, updateTableData: (t: TableData) => void}\r\n){\r\n    const [values, setValues] = React.useState(table.getValues(tableData));\r\n    const [isLoading, setIsLoading] = React.useState(false);\r\n\r\n    const shouldExpand = (t: Table) => t.isDependenciesLoaded(tableData);\r\n    const [isExpanded, setIsExpanded] = React.useState(shouldExpand(table));\r\n\r\n    const elRef = React.useRef(null as HTMLDivElement|null);\r\n    React.useEffect(() => {\r\n        if (isSelected){\r\n            elRef.current?.scrollIntoView({behavior: 'smooth', block: 'start'});\r\n        }\r\n        setIsExpanded(true);\r\n        scrollTo(null);\r\n    }, [isSelected]);\r\n\r\n    React.useEffect(() => {\r\n        setIsExpanded(shouldExpand(table));\r\n    }, [shouldExpand(table)]);\r\n\r\n    React.useEffect(() => {\r\n        setValues(table.getValues(tableData));\r\n    }, [JSON.stringify(table.getValues(tableData))]);\r\n\r\n    return <div ref={elRef} className='table'>\r\n        <div className='tableHeader row clickable' onClick={() => setIsExpanded(!isExpanded)}>\r\n            <div className='tableChevronContainer'>\r\n                {isExpanded ? Icons.ChevronDown : Icons.ChevronUp}\r\n            </div>\r\n            <h2 className='centerAll'>{table.name}</h2>\r\n            <div className='spacer'></div>\r\n            <div className='tableAvailability centerAll'>\r\n                {table.isDependenciesLoaded(tableData) ? \r\n                    (table.isLoaded(tableData) ? Icons.CheckMark : Icons.PlusSign) : \r\n                    Icons.CrossSign\r\n                }\r\n            </div>\r\n        </div>\r\n        {!isExpanded ? null : <div className='tableConfig col'>\r\n            <div className='tableDesc'>\r\n                <p>{table.desc}</p>\r\n            </div>\r\n            {table.dependencies.length == 0 ? null : <div className='tableDependencies'>\r\n                <h3>Depends on:</h3>\r\n                <ul>\r\n                    {table.dependencies.map((t,i) => <li \r\n                        className='dependency row centerCross clickable'\r\n                        onClick={() => scrollTo(t)}\r\n                        key={i}\r\n                    >\r\n                        <p>{t.name} table</p>\r\n                        <div className='dependencyIcon row centerCross'>\r\n                            {t.isLoaded(tableData) ? Icons.CheckMark : Icons.CrossSign}\r\n                        </div>\r\n                    </li>)}\r\n                </ul>\r\n            </div>}\r\n            <div className='tableColumns'>\r\n                <h3>Columns:</h3>\r\n                <ul>\r\n                    {table.columns.map((c, i) => \r\n                        <li key={i}><ColumnConfig table={table} col={c}/></li>\r\n                    )}\r\n                </ul>\r\n            </div>\r\n            <div className='tableUpload col centerCross'>\r\n                <FileUpload \r\n                    table={table} \r\n                    tableData={tableData} \r\n                    updateTableData={updateTableData} \r\n                    isLoading={isLoading} \r\n                    setIsLoading={setIsLoading}\r\n                />\r\n                {!isLoading && table.isLoaded(tableData) ? <div className='tableTable'>\r\n                    <table>\r\n                        <thead><tr>\r\n                            {table.columns.map((c, i) => \r\n                                <th key={i}>{c.name}</th>\r\n                            )}\r\n                        </tr></thead>\r\n                        <tbody>{values.map((r, i) => \r\n                            <tr key={i}>{r.map((c, k) => \r\n                                <td key={k}>\r\n                                    {FormatColumn(c, table.columns[k].type)}\r\n                                </td>\r\n                            )} </tr>\r\n                        )}</tbody>\r\n                    </table>\r\n                </div> : null}\r\n            </div>\r\n        </div>}\r\n    </div>\r\n}\r\n\r\nfunction ConfigurationPage(\r\n        {tableData, updateTableData}: \r\n        {tableData: TableData, updateTableData: (tableData: TableData) => void}\r\n    ){\r\n\r\n    let [selectedTable, selectTable] = React.useState(null as Table|null);\r\n\r\n    return <div id='configPage'>\r\n        {tables.map(t => <TableConfig \r\n            key={t.name} \r\n            table={t} \r\n            isSelected={selectedTable == t} \r\n            scrollTo={(t: Table|null) => selectTable(t)}\r\n            tableData={tableData}\r\n            updateTableData={updateTableData}\r\n        />)}\r\n    </div>\r\n}\r\n\r\nexport default ConfigurationPage;","import { strictEqual } from 'assert';\r\nimport React from 'react';\r\nimport internal from 'stream';\r\nimport Icons from './Icons';\r\nimport './styles/Schedule.css';\r\nimport { CallAPIToJson, CallAPIJsonToJson, RestfulType, CallAPIJsonToDownloadCSV } from './Utilities';\r\n\r\ninterface IAttendee {\r\n    name: string;\r\n    commitments: IInterval[];\r\n    prefs: {[company: string]: number};\r\n}\r\n\r\ninterface IInterval {\r\n    start: string;\r\n    end: string;\r\n}\r\n\r\nclass Interval {\r\n    start: Date;\r\n    end: Date;\r\n    lengthMins: number;\r\n\r\n    constructor(start: Date, end: Date){\r\n        this.start = start;\r\n        this.end = end;\r\n        this.lengthMins = (+end - +start) / 1000 / 60;\r\n    }\r\n\r\n    static fromStr(intervalStr: IInterval): Interval {\r\n        return new Interval(\r\n            new Date(intervalStr.start),\r\n            new Date(intervalStr.end)\r\n        )\r\n    }\r\n}\r\n\r\ninterface IAppointment extends IInterval {\r\n    att?: number;\r\n    isCoffeeChat: boolean;\r\n    room: string;\r\n}\r\n\r\nclass Appointment {\r\n    att?: number;\r\n    companyName: string;\r\n    roomName: string;\r\n    interval: Interval;\r\n    isCoffeeChat: boolean;\r\n    iApp: IAppointment;\r\n\r\n    constructor(att: number|undefined, companyName: string, roomName: string, iApp: IAppointment){\r\n        this.att = att;\r\n        this.companyName = companyName;\r\n        this.roomName = roomName;\r\n        this.interval = Interval.fromStr(iApp);\r\n        this.isCoffeeChat = iApp.isCoffeeChat;\r\n        this.iApp = iApp;\r\n    }\r\n}\r\ninterface ICoffeeChat extends IInterval {\r\n    candidates: number[];\r\n    capcaity: number;\r\n}\r\n\r\ninterface IRoom {\r\n    apps: IAppointment[];\r\n    candidates: number[];\r\n    coffeeChat?: ICoffeeChat;\r\n}\r\n\r\ninterface ISchedule {\r\n    attendees: {[attId: number]: IAttendee};\r\n    companies: {[companyName: string]: {[roomName: string]: IRoom}};\r\n    conventionTimes: IInterval[];\r\n    totalUtility: number;\r\n    noAppointments: number;\r\n    noAppointmentsNotEmpty: number;\r\n    noAttendeeesChosen: number;\r\n    varNoAppointments: number;\r\n}\r\n\r\nfunction getCCPref(schedule: ISchedule, companyName: string, roomName: string, attId: number): number | null{\r\n    let ccCandidates = schedule.companies[companyName][roomName].coffeeChat?.candidates;\r\n    return ccCandidates ? ccCandidates.indexOf(attId) + 1 : null;\r\n}\r\n\r\nfunction addHours(date: Date, hours: number): Date {\r\n    let newDate = new Date(date);\r\n    newDate.setHours(date.getHours() + hours);\r\n    return newDate\r\n}\r\n\r\nfunction getHeadings(schedule: ISchedule): Date[]{\r\n    let conventionTimes = schedule.conventionTimes.map(\r\n        time => Interval.fromStr(time)\r\n    );\r\n\r\n    let headings = [];\r\n    for (let interval of conventionTimes){\r\n        for (let t = interval.start; t < interval.end; t = addHours(t, 1)){\r\n            headings.push(t);\r\n        }\r\n    }\r\n    return headings;\r\n}\r\n\r\nconst dateToTimeStr = (date: Date) => new Intl.DateTimeFormat(\r\n    'en-US', \r\n    { hour: 'numeric', minute: 'numeric', hour12: true }\r\n).format(date);\r\n\r\n\r\nfunction dateToStr(date: Date){\r\n    let time = dateToTimeStr(date);\r\n    let month = new Intl.DateTimeFormat('en-US', { month: 'short'}).format(date);\r\n    let day = date.getDate();\r\n    return `${month} ${day}, ${time}`;\r\n}\r\n\r\nvar ATT_TO_APPS: {[att: number]: Appointment[]} = {};\r\nvar ROOM_TO_COMPANY: {[room: string]: string} = {};\r\nvar ATT_TO_INTERVIEWROOMS: {[att: number]: Set<string>} = {};\r\nvar ATT_TO_COFFEECHATROOMS: {[att: number]: Set<string>} = {};\r\nvar ROOM_TO_COFFEECHATAPPS: {[room: string]: Appointment[]} = {};\r\n\r\nvar DRAGGING_APP: {\r\n    app: string|null, \r\n    room: string|null, \r\n    att: string|null, \r\n    time: string|null\r\n} = {\r\n    'app': null,\r\n    'room': null,\r\n    'att': null,\r\n    'time': null\r\n}\r\n\r\nfunction ScheduleCompany(\r\n    {schedule, swapFunc}: \r\n    {schedule: ISchedule, swapFunc: (isCoffeeChat: boolean, app1?: Object, att1?: number, app2?: Object, att2?: number) => void}\r\n){\r\n    let headings = getHeadings(schedule);\r\n    ATT_TO_APPS = {}; // empty out prev\r\n    ATT_TO_INTERVIEWROOMS = {};\r\n    ATT_TO_COFFEECHATROOMS = {};\r\n\r\n    ROOM_TO_COMPANY = {};\r\n    ROOM_TO_COFFEECHATAPPS = {};\r\n\r\n    function dragInterviewApp(ev: React.DragEvent<HTMLDivElement>) {\r\n        console.log('draggin');\r\n\r\n        let el = ev.target as any;\r\n        let attStr = el.dataset.att;\r\n        let timeStr = el.dataset.time;\r\n        let roomStr = el.dataset.room;\r\n        let appStr = el.dataset.app;\r\n\r\n        DRAGGING_APP.att = attStr ?? '';\r\n        DRAGGING_APP.time = timeStr ?? '';\r\n        DRAGGING_APP.room = roomStr ?? '';\r\n        DRAGGING_APP.app = appStr ?? '';\r\n\r\n        document.querySelectorAll(\r\n            `#scheduleCompany tbody tr:not([data-room='${roomStr}'])`\r\n        ).forEach(row => {\r\n            row.classList.add('fadeRoom');\r\n        });\r\n    }\r\n\r\n    function dropInterviewApp(ev: React.DragEvent<HTMLDivElement>) {\r\n        console.log('droppin');\r\n        ev.preventDefault();\r\n\r\n        let el = ev.currentTarget;\r\n        let attStr = el.dataset.att;\r\n        let timeStr = el.dataset.time;\r\n        let roomStr = el.dataset.room;\r\n        let appStr = el.dataset.app;\r\n\r\n        let otherAttStr = DRAGGING_APP.att;\r\n        let otherTimeStr = DRAGGING_APP.time;\r\n        let otherRoomStr = DRAGGING_APP.room;\r\n        let otherAppStr = DRAGGING_APP.app;\r\n\r\n        let room = roomStr || otherRoomStr;\r\n\r\n        let [att1, att2] = [attStr, otherAttStr].map(s => s ? parseInt(s) : undefined);\r\n        let [app1, app2] = [appStr, otherAppStr].map(s => s ? JSON.parse(s) : undefined);\r\n\r\n        let getAppStr = (att?: number, time?: string|null) => `${att ? `Attendee ${att}` : 'Appointment'}${time ? ` @ ${time}` : ''}`;\r\n\r\n        if (window.confirm(\r\n                (!att1 && !app1) ? \r\n                `Are you sure you want to move ${getAppStr(att2, otherTimeStr)} out of the schedule (to the extra column) for ${room}?` : \r\n                `Are you sure you want to swap ${getAppStr(att2, otherTimeStr)} with ${getAppStr(att1, timeStr)} for ${room}?`\r\n            )){\r\n            console.log('hi');\r\n            swapFunc(false, app1, att1, app2, att2);\r\n        }\r\n    }\r\n\r\n    function allowInterviewDrop(ev: any) {\r\n\r\n        let el = ev.target;\r\n        let attStr = el.dataset.att;\r\n        let timeStr = el.dataset.time;\r\n        let roomStr = el.dataset.room;\r\n        let appStr = el.dataset.app;\r\n\r\n        let otherAttStr = DRAGGING_APP.att;\r\n        let otherTimeStr = DRAGGING_APP.time;\r\n        let otherRoomStr = DRAGGING_APP.room;\r\n        let otherAppStr = DRAGGING_APP.app;\r\n\r\n        if (!(\r\n            (!timeStr && !otherTimeStr) ||\r\n            (timeStr == otherTimeStr) ||\r\n            (roomStr != otherRoomStr) ||\r\n            (!attStr && !otherAttStr) ||\r\n            (!appStr && !otherAppStr)\r\n        )){\r\n            // if these conditions are false, allow drag by preventDefault\r\n            ev.preventDefault();\r\n        }\r\n    }\r\n\r\n    function dragInterviewAppEnd(ev: any){\r\n        document.querySelectorAll(\"#scheduleCompany tbody tr.fadeRoom\").forEach(row => {\r\n            row.classList.remove('fadeRoom');\r\n        });\r\n    }\r\n\r\n    return <><h2>Interviews</h2><div id='scheduleCompany' className=\"scheduleTableContainer\">\r\n        <table>\r\n            <thead><tr>\r\n                <th id='roomNameCol'>Room Name</th>\r\n                {headings.map((time, i) => \r\n                    <th key={i}>{dateToStr(time)}</th>\r\n                )}\r\n                <th id='extra'>Extra</th>\r\n            </tr></thead>\r\n            <tbody>\r\n                {Object.entries(schedule.companies).map(([companyName, rooms]) => {\r\n                    return Object.entries(rooms).map(([roomName, room]) => {\r\n\r\n                        let timeToApp: {[time: number]: Appointment[]} = {};\r\n                        let addedInCoffeeChat = false;\r\n                        let i = 0;\r\n\r\n                        ROOM_TO_COMPANY[roomName] = companyName;\r\n\r\n                        let candidatesNotSelected = new Set(room.candidates);\r\n                        for (let attId of room.candidates){\r\n                            ATT_TO_INTERVIEWROOMS[attId] = ATT_TO_INTERVIEWROOMS[attId] || new Set();\r\n                            ATT_TO_INTERVIEWROOMS[attId].add(roomName);\r\n                        }\r\n                        if (room.coffeeChat){\r\n                            for (let attId of room.coffeeChat.candidates){\r\n                                ATT_TO_COFFEECHATROOMS[attId] = ATT_TO_COFFEECHATROOMS[attId] || new Set();\r\n                                ATT_TO_COFFEECHATROOMS[attId].add(roomName);\r\n                            } \r\n                        }\r\n                        /* as we iterate over apps, remove attendees who are selected */\r\n                        for (let iApp of room.apps) {\r\n                            let app = new Appointment(iApp.att, companyName, roomName, iApp);\r\n                            if (app.att != null){\r\n                                if (!app.isCoffeeChat){\r\n                                    candidatesNotSelected.delete(app.att);\r\n                                }\r\n                                ATT_TO_APPS[app.att] = [...(ATT_TO_APPS[app.att] || []), app];\r\n                            }\r\n                            if (app.isCoffeeChat){\r\n                                ROOM_TO_COFFEECHATAPPS[roomName] = [...(ROOM_TO_COFFEECHATAPPS[roomName] || []), app];\r\n                                if (addedInCoffeeChat){\r\n                                    continue; // only use one coffee chat\r\n                                } else {\r\n                                    addedInCoffeeChat = true;\r\n                                }\r\n                            }\r\n                            let interval = app.interval;\r\n\r\n                            for (;i < headings.length && addHours(headings[i], 1) <= interval.start; i++){}\r\n\r\n                            timeToApp[+headings[i]] = timeToApp[+headings[i]] || [];\r\n                            timeToApp[+headings[i]].push(app);\r\n                        }\r\n                        return <tr data-room={roomName}>\r\n                            <td>{roomName}</td>\r\n                            {headings.map(heading => <td key={+heading}>{\r\n                                (timeToApp[+heading] || []).map(app => {\r\n                                    let interval = app.interval;\r\n                                    let lengthPercent = (interval.lengthMins / 60) * 100;\r\n                                    let startPercent = (interval.start.getMinutes() / 60) * 100;\r\n                                    let att = app.att == null ? null : schedule.attendees[app.att!];\r\n                                    \r\n                                    return <div \r\n                                        className=\"appContainer centerAll\" style={{\r\n                                            left: `${startPercent}%`,\r\n                                            width: `${lengthPercent}%`\r\n                                        }}\r\n                                        key={roomName + interval.toString()}\r\n                                    >\r\n                                        <div\r\n                                            data-att={app.isCoffeeChat ? null : app.att}\r\n                                            data-time={dateToTimeStr(interval.start)} \r\n                                            data-room={roomName} \r\n                                            data-app={app.isCoffeeChat ? null : JSON.stringify(app.iApp as Object)}\r\n                                            className={`app col centerAll ${app.att ? '' : 'empty'} ${app.isCoffeeChat ? 'cc' : ''}`} \r\n                                            draggable={app.att != null && !app.isCoffeeChat}\r\n                                            onDragStart={app.isCoffeeChat ? ()=>{} : dragInterviewApp} \r\n                                            onDragEnd={app.isCoffeeChat ? ()=>{} : dragInterviewAppEnd}\r\n                                            onDrop={app.isCoffeeChat ? ()=>{} : dropInterviewApp} \r\n                                            onDragOver={app.isCoffeeChat ? ()=>{} : allowInterviewDrop}\r\n                                        >\r\n                                            {app.isCoffeeChat ? <div className='ccIcon'>{Icons.Coffee}</div> : null}\r\n                                            <div className='appLength'>{interval.lengthMins}m</div>\r\n                                            <span className='appAtt'>{app.isCoffeeChat ? 'coffee chat' : app.att || '?'}</span>\r\n                                            <span className='appTime'>{dateToTimeStr(interval.start)}</span>\r\n                                            <span className='appPref'>{att == null || app.isCoffeeChat ? null : `pref: ${att?.prefs[companyName]}`}</span>\r\n                                        </div>\r\n                                    </div>\r\n                                })\r\n                            }</td>)}\r\n                            <td><div className=\"row centerCross\">\r\n                                <div className=\"appContainer notSelected centerAll\">\r\n                                    <div \r\n                                        className={`app removeApp col centerAll`} \r\n                                        data-room={roomName} \r\n                                        onDrop={dropInterviewApp} \r\n                                        onDragOver={allowInterviewDrop}\r\n                                    >\r\n                                        <span className='appAtt'>remove</span>\r\n                                    </div>\r\n                                </div>\r\n                                {Array.from(candidatesNotSelected).map(attId => {\r\n                                    let att = schedule.attendees[attId];\r\n                                    return <div key={attId} className=\"appContainer notSelected centerAll\">\r\n                                        <div \r\n                                            className={`app col centerAll`} \r\n                                            draggable \r\n                                            data-att={attId} \r\n                                            data-room={roomName} \r\n                                            onDragStart={dragInterviewApp} \r\n                                            onDragEnd={dragInterviewAppEnd}\r\n                                            onDrop={dropInterviewApp} \r\n                                            onDragOver={allowInterviewDrop}\r\n                                        >   \r\n                                            <span className='appPref'>pref: {att.prefs[companyName]}</span>\r\n                                            <span className='appAtt'>{attId}</span>\r\n                                        </div>\r\n                                    </div>\r\n                                })}\r\n                            </div></td>\r\n                        </tr>\r\n                    })\r\n                })}\r\n            </tbody>\r\n        </table>\r\n    </div></>\r\n}\r\n\r\nfunction ScheduleCoffeeChat(\r\n    {schedule, swapFunc}: \r\n    {schedule: ISchedule, swapFunc: (isCoffeeChat: boolean, app1?: Object, att1?: number, app2?: Object, att2?: number) => void}\r\n){\r\n    function dragCCApp(ev: React.DragEvent<HTMLDivElement>) {\r\n        console.log('draggin');\r\n\r\n        let el = ev.target as any;\r\n        let attStr = el.dataset.att;\r\n        let timeStr = el.dataset.time;\r\n        let roomStr = el.dataset.room;\r\n        let appStr = el.dataset.app;\r\n\r\n        DRAGGING_APP.att = attStr ?? '';\r\n        DRAGGING_APP.time = timeStr ?? '';\r\n        DRAGGING_APP.room = roomStr ?? '';\r\n        DRAGGING_APP.app = appStr ?? '';\r\n\r\n        document.querySelectorAll(\r\n            `#scheduleCoffeeChat tbody tr:not([data-room='${roomStr}'])`\r\n        ).forEach(row => {\r\n            row.classList.add('fadeRoom');\r\n        });\r\n    }\r\n\r\n    function dropCCApp(ev: React.DragEvent<HTMLDivElement>) {\r\n        console.log('droppin');\r\n        ev.preventDefault();\r\n\r\n        let el = ev.currentTarget;\r\n        let attStr = el.dataset.att;\r\n        let timeStr = el.dataset.time;\r\n        let roomStr = el.dataset.room;\r\n        let appStr = el.dataset.app;\r\n\r\n        let otherAttStr = DRAGGING_APP.att;\r\n        let otherTimeStr = DRAGGING_APP.time;\r\n        let otherRoomStr = DRAGGING_APP.room;\r\n        let otherAppStr = DRAGGING_APP.app;\r\n\r\n        let room = roomStr || otherRoomStr;\r\n\r\n        let [att1, att2] = [attStr, otherAttStr].map(s => s ? parseInt(s) : undefined);\r\n        let [app1, app2] = [appStr, otherAppStr].map(s => s ? JSON.parse(s) : undefined);\r\n\r\n        let getAppStr = (att?: number, time?: string|null) => `${att ? `Attendee ${att}` : 'Appointment'}${time ? ` @ ${time}` : ''}`;\r\n\r\n        if (window.confirm(\r\n                (!att1 && !app1) ? \r\n                `Are you sure you want to move ${getAppStr(att2, otherTimeStr)} out of the schedule (to the extra column) for ${room}?` : \r\n                `Are you sure you want to swap ${getAppStr(att2, otherTimeStr)} with ${getAppStr(att1, timeStr)} for ${room}?`\r\n            )){\r\n            console.log('hi');\r\n            swapFunc(true, app1, att1, app2, att2);\r\n        }\r\n    }\r\n\r\n    function allowCCDrop(ev: any) {\r\n\r\n        let el = ev.target;\r\n        let attStr = el.dataset.att;\r\n        let timeStr = el.dataset.time;\r\n        let roomStr = el.dataset.room;\r\n        let appStr = el.dataset.app;\r\n\r\n        let otherAttStr = DRAGGING_APP.att;\r\n        let otherTimeStr = DRAGGING_APP.time;\r\n        let otherRoomStr = DRAGGING_APP.room;\r\n        let otherAppStr = DRAGGING_APP.app;\r\n\r\n        if (!(\r\n            (!timeStr && !otherTimeStr) ||\r\n            (timeStr == otherTimeStr) ||\r\n            (roomStr != otherRoomStr) ||\r\n            (!attStr && !otherAttStr) ||\r\n            (!appStr && !otherAppStr)\r\n        )){\r\n            // if these conditions are false, allow drag by preventDefault\r\n            ev.preventDefault();\r\n        }\r\n    }\r\n\r\n    function dragCCAppEnd(ev: any){\r\n        document.querySelectorAll(\"#scheduleCoffeeChat tbody tr.fadeRoom\").forEach(row => {\r\n            row.classList.remove('fadeRoom');\r\n        });\r\n    }\r\n\r\n    return <><h2>Coffee Chats</h2><div id='scheduleCoffeeChat' className=\"scheduleTableContainer\">\r\n        <table>\r\n            <thead><tr>\r\n                <th id='roomNameCol'>Room Name</th>\r\n                <th>Appointments</th>\r\n                <th id='extra'>Extra</th>\r\n            </tr></thead>\r\n            <tbody>\r\n                {Object.entries(schedule.companies).map(([companyName, rooms]) => {\r\n                    return Object.entries(rooms).map(([roomName, room]) => {\r\n                        let cc = room.coffeeChat;\r\n                        if (cc == null){\r\n                            return null;\r\n                        }       \r\n                        let interval = Interval.fromStr(cc);    \r\n                        \r\n                        let candidatesNotSelected = new Set(cc.candidates);\r\n                        return <tr data-room={roomName}>\r\n                            <td className=\"ccRowLabel\">\r\n                                <p className=\"ccRoomName\">{roomName}</p>\r\n                                <p className=\"ccRoomDate\">({dateToStr(interval.start)}, {dateToStr(interval.end)})</p>\r\n                            </td>\r\n                            <td><div className=\"row centerCross\">{room.apps.map(app => {\r\n                                if (!app.isCoffeeChat){ \r\n                                    return null; \r\n                                }\r\n                                let att = app.att == null ? null : schedule.attendees[app.att!];\r\n                                if (att != null){\r\n                                    candidatesNotSelected.delete(app.att!);\r\n                                }\r\n                                let ccPref = [cc, app.att].includes(undefined) ? null : getCCPref(schedule, companyName, roomName, app.att!); \r\n                                return <div className=\"appContainer centerAll\">\r\n                                    <div\r\n                                        data-att={app.att}\r\n                                        data-time={dateToTimeStr(interval.start)} \r\n                                        data-room={roomName} \r\n                                        data-app={JSON.stringify(app as Object)}\r\n                                        className={`app col centerAll ${app.att ? '' : 'empty'} cc`} \r\n                                        draggable={app.att != null}\r\n                                        onDragStart={dragCCApp} \r\n                                        onDragEnd={dragCCAppEnd}\r\n                                        onDrop={dropCCApp} \r\n                                        onDragOver={allowCCDrop}\r\n                                    >\r\n                                        <div className='ccIcon'>{Icons.Coffee}</div>\r\n                                        <div className='appLength'>{interval.lengthMins}m</div>\r\n                                        <span className='appAtt'>{app.att || '?'}</span>\r\n                                        <span className='appTime'>{dateToTimeStr(interval.start)}</span>\r\n                                        <span className='appPref'>{app.att == null ? null : `rank: ${ccPref}`}</span>\r\n                                        {/*<span className='appPref'>{app.att == null ? null : `pref: ${att?.prefs[companyName]}`}</span>*/}\r\n                                    </div>\r\n                                </div>\r\n                            })}</div></td>\r\n                            <td><div className=\"row centerCross\">\r\n                                <div className=\"appContainer notSelected centerAll\">\r\n                                    <div \r\n                                        className={`app removeApp col centerAll cc`} \r\n                                        data-room={roomName} \r\n                                        onDrop={dropCCApp} \r\n                                        onDragOver={allowCCDrop}\r\n                                    >\r\n                                        <span className='appAtt'>remove</span>\r\n                                    </div>\r\n                                </div>\r\n                                {Array.from(candidatesNotSelected).map(attId => {\r\n                                    let att = schedule.attendees[attId];\r\n                                    let ccPref = getCCPref(schedule, companyName, roomName, attId); \r\n                                    return <div key={attId} className=\"appContainer notSelected centerAll\">\r\n                                        <div \r\n                                            className={`app col centerAll cc`} \r\n                                            draggable \r\n                                            data-att={attId} \r\n                                            data-room={roomName} \r\n                                            onDragStart={dragCCApp} \r\n                                            onDragEnd={dragCCAppEnd}\r\n                                            onDrop={dropCCApp} \r\n                                            onDragOver={allowCCDrop}\r\n                                        >   \r\n                                            <div className='ccIcon'>{Icons.Coffee}</div>\r\n                                            <span className='appPref'>rank: {ccPref}</span>\r\n                                            {/*<span className='appPref'>pref: {att.prefs[companyName]}</span>*/}\r\n                                            <span className='appAtt'>{attId}</span>\r\n                                        </div>\r\n                                    </div>\r\n                                })}\r\n                            </div></td>\r\n                        </tr>\r\n                    })\r\n                })}\r\n                </tbody>\r\n        </table>\r\n    </div></>\r\n}\r\n\r\nfunction ScheduleAttendees(\r\n        {schedule,}: \r\n        {schedule: ISchedule}\r\n    ){\r\n\r\n    let headings = getHeadings(schedule);\r\n\r\n    return <><h2>Attendees</h2><div id='scheduleAttendee' className=\"scheduleTableContainer\">\r\n        <table>\r\n            <thead><tr>\r\n                <th id='roomNameCol'>Attendee</th>\r\n                {headings.map((time, i) => \r\n                    <th key={i}>{dateToStr(time)}</th>\r\n                )}\r\n                <th id='extra'>Extra</th>\r\n            </tr></thead>\r\n            <tbody>\r\n                {Object.entries(schedule.attendees).map(([attIdStr, att]) => {\r\n                    let timeToApp: {[time: number]: Appointment[]} = {};\r\n                    let timeToBreak: {[time: number]: Interval[]} = {};\r\n                    let attId = parseInt(attIdStr); // ts considers keys as string\r\n                    if ((\r\n                        (ATT_TO_INTERVIEWROOMS[attId] || new Set()).size + \r\n                        (ATT_TO_COFFEECHATROOMS[attId] || new Set()).size) == 0\r\n                    ){\r\n                        return;\r\n                    }\r\n\r\n                    let apps = ATT_TO_APPS[attId] || [];\r\n                    apps.sort((a,b) => +Interval.fromStr(a.iApp).start - +Interval.fromStr(b.iApp).start);\r\n\r\n                    let interviewRoomsNotSelected = new Set(ATT_TO_INTERVIEWROOMS[attId]);\r\n                    let coffeeChatRoomsNotSelected = new Set(ATT_TO_COFFEECHATROOMS[attId]);\r\n                    let i = 0;\r\n                    for (let app of apps) {\r\n                        if (app.att != null){\r\n                            let roomsNotSelected = app.isCoffeeChat ? coffeeChatRoomsNotSelected : interviewRoomsNotSelected;\r\n                            roomsNotSelected.delete(app.roomName);\r\n                        }\r\n                        let interval = Interval.fromStr(app.iApp);\r\n\r\n                        for (;i < headings.length && addHours(headings[i], 1) <= interval.start; i++){}\r\n\r\n                        timeToApp[+headings[i]] = timeToApp[+headings[i]] || [];\r\n                        timeToApp[+headings[i]].push(app);\r\n                    }\r\n                    i = 0;\r\n                    for (let breakStr of att.commitments) {\r\n                        let interval = Interval.fromStr(breakStr);\r\n\r\n                        for (;i < headings.length && addHours(headings[i], 1) <= interval.start; i++){}\r\n\r\n                        timeToBreak[+headings[i]] = timeToBreak[+headings[i]] || [];\r\n                        timeToBreak[+headings[i]].push(interval);\r\n                    }\r\n                    /* as we iterate over apps, remove companies who are selected */\r\n                    return <tr>\r\n                        <td>{attId}. {att.name}</td>\r\n                        {headings.map(heading =><td key={+heading}>{\r\n                            (timeToBreak[+heading] || []).map(interval => {\r\n                                let lengthPercent = (interval.lengthMins / 60) * 100;\r\n                                let startPercent = (interval.start.getMinutes() / 60) * 100;\r\n                                return <div \r\n                                    data-app={`${dateToStr(interval.start)} ${dateToStr(interval.end)}`} \r\n                                    className=\"appContainer centerAll\" style={{\r\n                                        left: `${startPercent}%`,\r\n                                        width: `${lengthPercent}%`\r\n                                    }}\r\n                                    key={attId + interval.toString()}\r\n                                >\r\n                                    <div className={`app col centerAll ${'empty'}`}>\r\n                                        <div className='appLength'>{interval.lengthMins}m</div>\r\n                                        <span className='appPref'></span>\r\n                                        <span className='appAtt'>{'break'}</span>\r\n                                        <span className='appTime'>{dateToTimeStr(interval.start)}</span>\r\n                                    </div>\r\n                                </div>\r\n                            })\r\n                        }{\r\n                            (timeToApp[+heading] || []).map(app => {\r\n                                let interval = Interval.fromStr(app.iApp);\r\n                                let lengthPercent = (interval.lengthMins / 60) * 100;\r\n                                let startPercent = (interval.start.getMinutes() / 60) * 100;\r\n                                let att = app.att == null ? null : schedule.attendees[app.att!];\r\n\r\n                                let ccPref = app.isCoffeeChat && app.att ? getCCPref(schedule, app.companyName, app.roomName, app.att!) : null;\r\n                                return <div \r\n                                    data-app={`${dateToStr(interval.start)} ${dateToStr(interval.end)}`} \r\n                                    className=\"appContainer centerAll\" style={{\r\n                                        left: `${startPercent}%`,\r\n                                        width: `${lengthPercent}%`\r\n                                    }}\r\n                                    key={attId + interval.toString()}\r\n                                >\r\n                                    <div className={`app col centerAll ${app.att ? '' : 'empty'} ${app.isCoffeeChat ? 'cc' : ''}`}>\r\n                                        {app.isCoffeeChat ? <div className='ccIcon'>{Icons.Coffee}</div> : null}\r\n                                        <div className='appLength'>{interval.lengthMins}m</div>\r\n                                        <span className='appAtt' title={app.roomName}>{app.roomName}</span>\r\n                                        <span className='appTime'>{dateToTimeStr(interval.start)}</span>\r\n                                        <span className='appPref'>{\r\n                                            att == null ? null : \r\n                                                app.isCoffeeChat ? `rank: ${ccPref}` : `pref: ${att?.prefs[app.companyName]}`\r\n                                        }</span>\r\n                                    </div>\r\n                                </div>\r\n                            })\r\n                        }</td>)}\r\n                        <td><div className=\"row\">{[false, true].map(isCoffeeChat => {\r\n                            let roomsNotSelected = isCoffeeChat ? coffeeChatRoomsNotSelected : interviewRoomsNotSelected;\r\n                            return Array.from(roomsNotSelected).map(roomName => {\r\n                                let companyName = ROOM_TO_COMPANY[roomName];\r\n                                let ccPref = isCoffeeChat ? getCCPref(schedule, companyName, roomName, attId) : null;\r\n                                return (\r\n                                    <div key={attId} className=\"appContainer notSelected centerAll\">\r\n                                        <div className={`app col centerAll ${isCoffeeChat ? 'cc' : ''}`}>\r\n                                            {isCoffeeChat ? <div className='ccIcon'>{Icons.Coffee}</div> : null}\r\n                                            <span className='appPref'>{\r\n                                                isCoffeeChat ? `rank: ${ccPref}` : `pref: ${att.prefs[companyName]}`\r\n                                            }</span>\r\n                                            <span className='appAtt'>{companyName}</span>\r\n                                        </div>\r\n                                    </div>\r\n                                )\r\n                            }\r\n                        )})}</div></td>\r\n                    </tr>\r\n                })}\r\n            </tbody>\r\n        </table>\r\n    </div></>\r\n}\r\n\r\nfunction SchedulePage(){\r\n\r\n    let [scheduleObj, setScheduleObj] = React.useState(null as ISchedule|null);\r\n    const [isLoading, setIsLoading] = React.useState(false);\r\n\r\n\tlet gen = () => {\r\n        setIsLoading(true);\r\n\t\tCallAPIToJson(\r\n            '/generateSchedule', \r\n            RestfulType.GET\r\n        ).then(({data}: {data: ISchedule}) => {\r\n            setScheduleObj(data);\r\n\t\t}).catch((res)=>{\r\n\t\t\tconsole.log(\"res\", res);\r\n\t\t\talert(res[\"error\"]);\r\n\t\t}).finally(()=>setIsLoading(false));\r\n\t}\r\n\r\n\tlet swap = (isCoffeeChat: boolean, app1?: Object, att1?: number, app2?: Object, att2?: number) => {\r\n        setIsLoading(true);\r\n\t\tCallAPIJsonToJson('/swapSchedule', RestfulType.POST, {\r\n            'data': {\r\n                ...(scheduleObj as Object),\r\n                'app1': app1 ?? null,\r\n                'att1': att1 ?? null,\r\n                'app2': app2 ?? null,\r\n                'att2': att2 ?? null,\r\n                'isCoffeeChat': isCoffeeChat\r\n            }\r\n        }).then(({data}: {data: ISchedule}) => {\r\n            setScheduleObj(data);\r\n\t\t}).catch((res)=>{\r\n\t\t\tconsole.log(\"res\", res);\r\n\t\t\talert(res[\"error\"]);\r\n\t\t}).finally(()=>setIsLoading(false));\r\n\t}\r\n\r\n\tlet writeSchedule = () => {\r\n        setIsLoading(true);\r\n\t\tCallAPIJsonToDownloadCSV(\r\n            '/writeSchedule', \r\n            RestfulType.POST, \r\n            {'data': scheduleObj}\r\n        ).finally(()=>setIsLoading(false));\r\n\t}\r\n\r\n    return <div id='schedulePage' className='col centerCross'>\r\n        <button id='generateButt' className='row centerAll' onClick={gen}>\r\n            {Icons.Generate}<p>generate schedule</p>\r\n        </button>\r\n        <div id='schedContainer' className=\"col centerCross\">\r\n            {isLoading ? <div id=\"schedLoader\" className=\"row centerAll\"><div className=\"loader\"></div></div> : null}\r\n            {(scheduleObj==null ? null : <>\r\n                    <div id='schedulesStats' className='row center'>\r\n                        <p>Appointments Filled: <span>{\r\n                            scheduleObj.noAppointmentsNotEmpty}/{scheduleObj.noAppointments\r\n                        }</span></p>\r\n                        <p>Avg No. Appointments: <span>{\r\n                            (scheduleObj.noAppointmentsNotEmpty/scheduleObj.noAttendeeesChosen).toFixed(2)\r\n                        }</span></p>\r\n                        <p>Var of No. Appointments: <span>{scheduleObj.varNoAppointments.toFixed(2)}</span></p>\r\n                        <p>Average Rank: <span>{(\r\n                            scheduleObj.totalUtility/scheduleObj.noAppointmentsNotEmpty).toFixed(2)\r\n                        }</span></p>\r\n                    </div>\r\n                    <div id='schedules'>\r\n                        <ScheduleCompany schedule={scheduleObj} swapFunc={swap}/>\r\n                        <ScheduleCoffeeChat schedule={scheduleObj} swapFunc={swap}/>\r\n                        <ScheduleAttendees schedule={scheduleObj}/>\r\n                    </div>\r\n                    <button id=\"writeScheduleButt\" className='row centerAll' onClick={writeSchedule}>\r\n                        {Icons.Edit}<p>write schedule</p>\r\n                    </button>\r\n                </>\r\n            )}\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default SchedulePage;","import React from 'react';\r\nimport ConfigurationPage from './Configuration';\r\nimport SchedulePage from './Schedule';\r\nimport Icons from './Icons';\r\nimport './styles/App.css';\r\nimport './styles/Fonts.css';\r\nimport './styles/tailwindColours.css';\r\nimport { CallAPIToJson, RestfulType, Table, TableData, tables } from './Utilities';\r\n\r\nfunction App(){\r\n\r\n\tlet [configPageSelected, setConfigPageSelected] = React.useState(true);\r\n\tlet [canGenerate, setCanGenerate] = React.useState(false);\r\n\r\n    let tableDataInit: {[name: string]: any[]} = {};\r\n    for (let table of tables){\r\n        tableDataInit[table.name] = [];\r\n    }\r\n    let [tableData, setTableData] = React.useState(tableDataInit);\r\n\r\n    async function getData(table: Table): Promise<string[][]>{\r\n        return CallAPIToJson(`/get${table.endpoint}`, RestfulType.GET)\r\n            .then(({data}: {data: string[][]}) => data)\r\n            .catch((res)=>{\r\n                console.log(\"res\", res);\r\n                alert(res[\"error\"]);\r\n                return [];\r\n            });\r\n    }\r\n\r\n    async function updateTableData(tableDataOld: TableData){\r\n        for (let table of tables){\r\n            tableData[table.name] = await getData(table);\r\n        }\r\n        setTableData({...tableDataOld});\r\n    }\r\n\r\n    React.useEffect(() => {updateTableData(tableData)}, []); // call once on init\r\n\r\n\tReact.useEffect(() => {\r\n\t\tlet canGenerate = true;\r\n\t\tfor (let table of tables){\r\n\t\t\tif (table.mandatory && !table.isLoaded(tableData)){\r\n\t\t\t\tcanGenerate = false;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tsetCanGenerate(canGenerate);\t\r\n\t}, [tableData])\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<header>\r\n\t\t\t\t<div id='banner' className=\"row\">\r\n\t\t\t\t\t<div id='calendarContainer' className='centerAll'>\r\n\t\t\t\t\t\t{Icons.Calendar}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div id='titleContainer' className='spacer centerCross'>\r\n\t\t\t\t\t\t<h1 id=''>Interview Scheduling Tool</h1>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div id='navButtons' className='centerAll'>\r\n\t\t\t\t\t<button \r\n\t\t\t\t\t\tclassName={configPageSelected ? 'selected' : ''}\r\n\t\t\t\t\t\tonClick={() => setConfigPageSelected(true)}\r\n\t\t\t\t\t>Configuration</button>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tclassName={configPageSelected ? '' : 'selected'}\r\n\t\t\t\t\t\tdisabled={!canGenerate}\r\n\t\t\t\t\t\ttitle={canGenerate ? '' : 'mandatory tables not uploaded'}\r\n\t\t\t\t\t\tonClick={() => setConfigPageSelected(false)}\r\n\t\t\t\t\t>Schedule</button>\r\n\t\t\t\t</div>\r\n\t\t\t</header>\r\n\t\t\t<div>\r\n\t\t\t\t{configPageSelected ? <ConfigurationPage tableData={tableData} updateTableData={updateTableData}/> : <SchedulePage/>}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}