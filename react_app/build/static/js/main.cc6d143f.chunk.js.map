{"version":3,"sources":["Utilities.tsx","Icons.tsx","Configuration.tsx","Schedule.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["RestfulType","ChevronLeft","focusable","className","role","xmlns","viewBox","fill","d","Icons","ChevronDown","style","transform","ChevronUp","Calendar","width","height","stroke","strokeWidth","strokeLinecap","strokeLinejoin","x","y","rx","ry","x1","y1","x2","y2","Upload","points","CheckMark","color","PlusSign","CrossSign","Generate","Coffee","Edit","CallAPIToJson","url","method","body","headers","Promise","resolve","reject","CallAPI","then","response","a","ok","json","replace","fullUrl","fetch","CallAPIJsonToJson","JSON","stringify","download","mimetype","data","filename","link","document","createElement","href","encodeURIComponent","click","ColumnType","ColumnTypeToStr","colType","STRING","INT","DATETIME","Error","tables","Table","name","endpoint","desc","columns","mandatory","dependencies","push","this","col","addColumn","table","tableData","every","t","isLoaded","length","conventionTimesTable","type","companyNameCol","roomNameCol","companyRoomsTable","roomInterviewsTable","attendeeCol","attendeeTable","coffeeChatsTable","FormatColumn","date","Date","parse","month","toLocaleString","mins","getMinutes","toString","padStart","getDay","getHours","FileUpload","updateTableData","fileRef","React","useRef","useState","isLoading","setIsLoading","fileName","setFileName","fileElement","current","files","setCustomValidity","reportValidity","file","FormData","append","POST","alert","catch","res","console","log","finally","useEffect","buttWorks","isDependenciesLoaded","id","onChange","sendFile","ref","accept","disabled","ColumnConfig","descs","join","TableConfig","isSelected","scrollTo","getValues","values","setValues","shouldExpand","isExpanded","setIsExpanded","elRef","scrollIntoView","behavior","block","onClick","map","i","c","r","k","ConfigurationPage","selectedTable","selectTable","Interval","start","end","lengthMins","intervalStr","Appointment","att","companyName","roomName","iApp","interval","isCoffeeChat","fromStr","getCCPref","schedule","attId","ccCandidates","companies","coffeeChat","candidates","indexOf","addHours","hours","newDate","setHours","getHeadings","conventionTimes","time","headings","dateToTimeStr","Intl","DateTimeFormat","hour","minute","hour12","format","dateToStr","day","getDate","ATT_TO_APPS","ROOM_TO_COMPANY","ATT_TO_INTERVIEWROOMS","ATT_TO_COFFEECHATROOMS","ROOM_TO_COFFEECHATAPPS","DRAGGING_APP","ScheduleCompany","swapFunc","dragInterviewApp","ev","el","target","attStr","dataset","timeStr","roomStr","room","appStr","app","querySelectorAll","forEach","row","classList","add","dropInterviewApp","preventDefault","currentTarget","otherAttStr","otherTimeStr","otherRoomStr","otherAppStr","s","parseInt","undefined","att1","att2","app1","app2","getAppStr","window","confirm","allowInterviewDrop","dragInterviewAppEnd","remove","Object","entries","rooms","timeToApp","addedInCoffeeChat","candidatesNotSelected","Set","apps","delete","heading","lengthPercent","startPercent","attendees","left","draggable","onDragStart","onDragEnd","onDrop","onDragOver","prefs","Array","from","ScheduleCoffeeChat","dragCCApp","dropCCApp","allowCCDrop","dragCCAppEnd","cc","ccPref","includes","ScheduleAttendees","attIdStr","timeToBreak","size","sort","b","interviewRoomsNotSelected","coffeeChatRoomsNotSelected","commitments","breakStr","title","roomsNotSelected","SchedulePage","scheduleObj","setScheduleObj","swap","GET","noAppointmentsNotEmpty","noAppointments","noAttendeeesChosen","toFixed","varNoAppointments","totalUtility","get","exec","text","CallAPIJsonToDownloadCSV","App","configPageSelected","setConfigPageSelected","canGenerate","setCanGenerate","tableDataInit","setTableData","getData","tableDataOld","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.cc6d143f.chunk.js","sourcesContent":["import { rejects } from 'assert';\nimport React from 'react';\n\nexport const EnumArray = (e: any): string[] => \n    Object.values(e).filter((s: any) => isNaN(s)) as string[];\n\n\nexport enum RestfulType {\n    POST,\n    GET,\n    PUT\n}\n\nexport function CallAPIToJson(\n    url: string, \n    method: RestfulType, \n    body: any = null,\n    headers: any = {}\n): Promise<any> {\n    return new Promise((resolve, reject) => \n        CallAPI(url, method, body, headers)\n            .then(async (response) => {\n                if (!response.ok){\n                    reject(await response.json());\n                } else {\n                    resolve(await response.json());\n                }\n            })\n    );\n}\n\nexport function CallAPIJsonToDownloadCSV(\n    url: string, \n    method: RestfulType, \n    json: any = null,\n): Promise<void> {\n    return new Promise((resolve, reject) => {\n        CallAPI(url, method, JSON.stringify(json), {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        })\n        .then(async (res) => {\n            if (!res.ok){\n                reject(alert(await res.json()))\n            } else {\n                let mimetype = res.headers.get('Content-Type')!;\n                let filename = /.+filename=\"([^\"]+)\"/g.exec(\n                    res.headers.get('Content-Disposition')!\n                )![1];\n\n                download(\n                    mimetype, \n                    await res.text(),\n                    filename\n                );\n                resolve();\n            }\n        })\n    });\n\n}\n\nexport function CallAPI(\n    url: string, \n    method: RestfulType, \n    body: any = null,\n    headers: any = {}\n): Promise<Response> {\n\turl = url.replace(/[ \\t\\n]/g, ''); // get rid of empty spaces and newlines\n    var fullUrl = `${process.env.PUBLIC_URL || './'}/${url}`;\n\treturn fetch(fullUrl, {\n        method: RestfulType[method],\n        body: body,\n        headers: headers\n\t});\n}\n\nexport const CallAPIJsonToJson = async (\n    url: string,\n    method: RestfulType,\n    body: Object\n) => CallAPIToJson(\n    url, \n    method, \n    JSON.stringify(body),\n    {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n    }\n);\n\nfunction download(mimetype: string, data: string, filename: string) {\n    const link = document.createElement(\"a\");\n    link.href = `data:${mimetype},${encodeURIComponent(data)}`;\n    link.download = filename;\n    link.click();\n}\n\n//https://stackoverflow.com/questions/1322732/convert-seconds-to-hh-mm-ss-with-javascript\nexport const secsToHMS = (secs: number): string => {\n    const hourInSecs = 60*60;\n    let dateStr = new Date(secs * 1000).toISOString();\n    const endIndex = 19;\n    let len = 8;\n    if (secs < hourInSecs) len -= 3;\n    return dateStr.substr(endIndex - len, len);\n};\n\nexport enum ColumnType {\n    STRING,\n    INT,\n    DATETIME\n}\n\nexport function ColumnTypeToStr(colType: ColumnType){\n    switch (colType){\n        case ColumnType.STRING:\n            return 'string';\n        case ColumnType.INT:\n            return 'integer';\n        case ColumnType.DATETIME:\n            return 'datetime';\n        default:\n            throw Error(`unhandled col type for ColumnTypeToStr(): ${ColumnType}`);\n    }\n}\n\nexport interface IColumn{\n    name: string;\n    type: ColumnType;\n    desc?: string;\n    table?: Table;\n}\n\nexport type TableData = {[tableName: string]: string[][]};\n\nexport const tables: Table[] = [];\n\nexport class Table{\n    name: string;\n    endpoint: string;\n    desc: string;\n    columns: IColumn[];\n    mandatory: boolean;\n    dependencies: Table[];\n\n    constructor(name: string, endpoint: string, desc: string, columns: IColumn[], mandatory: boolean, dependencies?: Table[]){\n        tables.push(this);\n        this.name = name;\n        this.endpoint = endpoint;\n        this.desc = desc;\n        this.mandatory = mandatory;\n        this.dependencies = dependencies ?? [];\n        this.columns = [];\n        for (let col of columns){\n            this.addColumn(col);\n        }\n    }\n\n    addColumn(col: IColumn){\n        this.columns.push(col);\n        col.table = col.table ?? this; \n        /* if this col doesn't have a table, add this one as their table */\n        return this;\n    }\n\n    getValues(tableData: TableData){\n        return tableData[this.name];\n    }\n\n    isDependenciesLoaded(tableData: TableData){\n        return this.dependencies.every(t => t.isLoaded(tableData));\n    }\n\n    isLoaded(tableData: TableData){\n        return 0 < (tableData[this.name]?.length ?? -1);\n    }\n}\n\nconst conventionTimesTable: Table = new Table(\n    'Convention Times',\n    'ConventionTimes',\n    'This is a list of valid times for the convention.',\n    [\n        {\n            name: 'Start Time',\n            type: ColumnType.DATETIME\n        },\n        {\n            name: 'End Time',\n            type: ColumnType.DATETIME,\n            desc: 'must be greater than start time'\n        },\n    ],\n    true\n);\n\nconst companyNameCol: IColumn = {\n    name: 'Company Name',\n    type: ColumnType.STRING\n}\n\nconst roomNameCol: IColumn = {\n    name: 'Room Name',\n    type: ColumnType.STRING\n}\n\n\nconst companyRoomsTable: Table = new Table(\n    'Company Rooms',\n    'CompanyRooms',\n    'This is a list of companies participating, and their rooms.',\n    [companyNameCol, roomNameCol],\n    true\n);\n\n\nconst roomInterviewsTable: Table = new Table(\n    'Room Interviews',\n    'RoomInterviews',\n    'This is a list of rooms with interviews.',\n    [roomNameCol, {\n        name: 'Length',\n        type: ColumnType.INT,\n        desc: 'in minutes'\n    },    \n    {\n        name: 'Start Time',\n        type: ColumnType.DATETIME\n    },\n    {\n        name: 'End Time',\n        type: ColumnType.DATETIME,\n        desc: 'must be greater than start time'\n    }],\n    true,\n    [conventionTimesTable, companyRoomsTable]\n);\n\nconst roomBreaksTable: Table = new Table(\n    'Room Breaks',\n    'RoomBreaks',\n    'This is a list of rooms belonging to a company.',\n    [\n        roomNameCol,\n        {\n            name: 'Start Time',\n            type: ColumnType.DATETIME\n        },\n        {\n            name: 'End Time',\n            type: ColumnType.DATETIME,\n            desc: 'must be greater than start time'\n        }\n    ],\n    false,\n    [companyRoomsTable]\n);\n\nconst attendeeCol: IColumn = {\n    name: 'Attendee ID',\n    type: ColumnType.STRING\n}\n\nconst attendeeTable: Table = new Table(\n    'Attendees',\n    'AttendeeNames',\n    'This is a list of rooms belonging to a company.',\n    [attendeeCol, {\n        name: \"Attendee Name\",\n        type: ColumnType.STRING\n    }],\n    true\n);\n\nconst attendeeBreaksTable: Table = new Table(\n    'Attendee Breaks',\n    'AttendeeBreaks',\n    'This is a list of rooms belonging to a company.',\n    [attendeeCol,\n    {\n        name: 'Start Time',\n        type: ColumnType.DATETIME\n    },\n    {\n        name: 'End Time',\n        type: ColumnType.DATETIME,\n        desc: 'must be greater than start time'\n    }],\n    false,\n    [conventionTimesTable, attendeeTable]\n);\n\nconst attendeePrefsTable: Table = new Table(\n    'Attendee Preferences',\n    'AttendeePrefs',\n    'This is a list of rooms belonging to a company.',\n    [attendeeCol, companyNameCol,\n    {\n        name: 'Preference',\n        type: ColumnType.INT,\n        desc: 'must be positive, the smaller the better'\n    }],\n    true,\n    [attendeeTable, companyRoomsTable]\n);\n\nconst interviewCandidatesTable: Table = new Table(\n    'Interview Candidates',\n    'InterviewCandidates',\n    'This is a list of interview candidates.',\n    [roomNameCol, attendeeCol],\n    true,\n    [companyRoomsTable, roomInterviewsTable, attendeeTable]\n);\n\nconst coffeeChatsTable: Table = new Table(\n    'Coffee Chats',\n    'CoffeeChats',\n    'This is a list of room coffee chats.',\n    [roomNameCol, \n    {\n        name: \"Capacity\",\n        type: ColumnType.INT,\n        desc: \"must be positive\"\n    },\n    {\n        name: 'Start Time',\n        type: ColumnType.DATETIME\n    },\n    {\n        name: 'End Time',\n        type: ColumnType.DATETIME,\n        desc: 'must be greater than start time'\n    }],\n    false,\n    [conventionTimesTable, companyRoomsTable]\n);\n\nconst coffeeChatsCandidatesTable: Table = new Table(\n    'Coffee Chat Candidates',\n    'CoffeeChatCandidates',\n    'This is a list of room coffee chats candidates.',\n    [roomNameCol, attendeeCol, {\n        name: 'Preference',\n        type: ColumnType.INT,\n        desc: 'must be positive, the smaller the better'\n    }],\n    false,\n    [attendeeTable, companyRoomsTable, coffeeChatsTable]\n);","import React from 'react';\n\nconst ChevronLeft = <svg aria-hidden=\"true\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"chevron-left\" className=\"chevron svg-inline--fa fa-chevron-left fa-w-10\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"-96 0 512 512\"><path fill=\"currentColor\" d=\"M34.52 239.03L228.87 44.69c9.37-9.37 24.57-9.37 33.94 0l22.67 22.67c9.36 9.36 9.37 24.52.04 33.9L131.49 256l154.02 154.75c9.34 9.38 9.32 24.54-.04 33.9l-22.67 22.67c-9.37 9.37-24.57 9.37-33.94 0L34.52 272.97c-9.37-9.37-9.37-24.57 0-33.94z\" /></svg>\n\nconst Icons = {\n    ChevronDown: <div className=\"centerAll\" style={{ transform: \"rotate(-90deg)\"}}>{ChevronLeft}</div>,\n    ChevronUp: <div className=\"centerAll\" style={{ transform: \"rotate(90deg)\"}}>{ChevronLeft}</div>,\n    Calendar: <svg xmlns=\"http://www.w3.org/2000/svg\" width={24} height={24} viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth={2} strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"feather feather-calendar\"><rect x={3} y={4} width={18} height={18} rx={2} ry={2} /><line x1={16} y1={2} x2={16} y2={6} /><line x1={8} y1={2} x2={8} y2={6} /><line x1={3} y1={10} x2={21} y2={10} /></svg>,\n    Upload: <svg xmlns=\"http://www.w3.org/2000/svg\" width={24} height={24} viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth={2} strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"feather feather-upload\"><path d=\"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4\" /><g className=\"uploadArrow\"><polyline points=\"17 8 12 3 7 8\" /><line x1={12} y1={3} x2={12} y2={15} /></g></svg>,\n    CheckMark: <svg style={{color: 'var(--green)'}} xmlns=\"http://www.w3.org/2000/svg\" width={24} height={24} viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth={2} strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"feather feather-check-square\"><polyline points=\"9 11 12 14 22 4\" /><path d=\"M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11\" /></svg>,\n    PlusSign: <svg style={{color: 'var(--blue)'}} xmlns=\"http://www.w3.org/2000/svg\" width={24} height={24} viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth={2} strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"feather feather-plus-square\"><rect x={3} y={3} width={18} height={18} rx={2} ry={2} /><line x1={12} y1={8} x2={12} y2={16} /><line x1={8} y1={12} x2={16} y2={12} /></svg>,\n    CrossSign: <svg style={{color: 'var(--red)'}} xmlns=\"http://www.w3.org/2000/svg\" width={24} height={24} viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth={2} strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"feather feather-x-square\"><rect x={3} y={3} width={18} height={18} rx={2} ry={2} /><line x1={9} y1={9} x2={15} y2={15} /><line x1={15} y1={9} x2={9} y2={15} /></svg>,\n    Generate: <svg xmlns=\"http://www.w3.org/2000/svg\" width={24} height={24} viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth={2} strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"feather feather-refresh-cw\"><polyline points=\"23 4 23 10 17 10\" /><polyline points=\"1 20 1 14 7 14\" /><path d=\"M3.51 9a9 9 0 0 1 14.85-3.36L23 10M1 14l4.64 4.36A9 9 0 0 0 20.49 15\" /></svg>,\n    Coffee: <svg xmlns=\"http://www.w3.org/2000/svg\" width={24} height={24} viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth={2} strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"feather feather-coffee\"><path d=\"M18 8h1a4 4 0 0 1 0 8h-1\" /><path d=\"M2 8h16v9a4 4 0 0 1-4 4H6a4 4 0 0 1-4-4V8z\" /><line x1={6} y1={1} x2={6} y2={4} /><line x1={10} y1={1} x2={10} y2={4} /><line x1={14} y1={1} x2={14} y2={4} /></svg>,\n    Edit: <svg xmlns=\"http://www.w3.org/2000/svg\" width={24} height={24} viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth={2} strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"feather feather-edit\"><path d=\"M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7\" /><path className=\"editPen\" d=\"M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z\" /></svg>,\n\n};\n\nexport default Icons","import React from 'react';\nimport Icons from './Icons';\nimport './styles/Configuration.css';\nimport { CallAPIToJson, ColumnType, ColumnTypeToStr, IColumn, RestfulType, Table, TableData, tables } from './Utilities';\n\nfunction FormatColumn(col: string, colType: ColumnType){\n    switch (colType){\n        case ColumnType.STRING:\n        case ColumnType.INT:\n            return col;\n        case ColumnType.DATETIME:\n            let date = new Date(Date.parse(col));\n            let month = date.toLocaleString('default', { month: 'short' });\n            let mins = date.getMinutes().toString().padStart(2, '0');\n            return `${month} ${date.getDay()}, ${date.getHours()}:${mins}`;\n        default:\n            throw Error(`unhandled col type for FormatColumn(): ${ColumnType}`);\n    }\n}\n\nfunction FileUpload({table, tableData, updateTableData}: {table: Table, tableData: TableData, updateTableData: (td: TableData) => void}): JSX.Element{\n    const fileRef = React.useRef(null as HTMLInputElement|null);\n    const [isLoading, setIsLoading] = React.useState(false);\n    const [fileName, setFileName] = React.useState(\"\");\n\n    async function sendFile(){\n        let fileElement = fileRef.current;\n        if (fileElement == null){\n            return;\n        }\n        let files = fileElement.files;\n\n        if (files == null || files.length == 0) {\n            fileElement.setCustomValidity(\"Please select file\");\n            return fileElement.reportValidity();\n        } else {\n            fileElement.setCustomValidity(\"\");\n        }\n        let file = files[0];        \n        \n        var data = new FormData();\n        data.append('table', file);\n        \n        setIsLoading(true);\n        \n        CallAPIToJson(\n            `/set${table.endpoint}`, \n            RestfulType.POST, data\n        ).then(({data}: {data: string[][]}) => {\n            alert(`Uploaded table: ${table.name}`);\n            updateTableData(tableData);\n        }).catch((res)=>{\n            console.log(\"res\", res);\n            alert(res[\"error\"]);\n        }).finally(()=>{\n            setIsLoading(false);\n        });\n    }\n\n    function onFileChange(){\n        let fileElement = fileRef.current;\n        if (fileElement == null){\n            return;\n        }\n        let files = fileElement.files;\n\n        if (files != null && 0 < files.length) {\n            setFileName(files[0].name);    \n            sendFile();  \n        } else {\n            setFileName(\"\");      \n        }\n    }\n\n    React.useEffect(\n        ()=>{setFileName(\"\")}, \n        [JSON.stringify(tableData)]\n    )\n\n    let buttWorks = table.isDependenciesLoaded(tableData);\n\n    return isLoading ? <div className=\"loader\"></div> : <>\n        <label id=\"htmlUploadContainer\">\n            <input \n                onChange={onFileChange} \n                ref={fileRef} \n                name=\"file\" \n                accept=\".csv\" \n                type=\"file\"\n                disabled={!buttWorks}\n            />\n            <div id=\"htmlUpload\" className={`col centerCross clickable whiteWhenHovered ${buttWorks ? \"\" : \"disabled\"}`}>\n                <div className=\"row centerCross\">\n                    {Icons.Upload} \n                    <p>choose file</p>\n                </div>\n                <p>(.csv)</p>\n            </div>\n        </label>\n        <p><i>\n            {\n                buttWorks ? \n                    (fileName == \"\" ? \"No file selected\" : fileName) : \n                    \"dependencies not loaded\"\n            }\n        </i></p>\n    </>\n}\n\nfunction ColumnConfig({table, col}: {table: Table, col: IColumn}){\n\n    let descs = [ColumnTypeToStr(col.type)];\n    if (table != col.table){\n        descs.push(`must be defined in the ${col.table!.name} table`)\n    }\n    if (col.desc){\n        descs.push(col.desc);\n    }\n\n    return <div className='column'>\n        <b>{col.name}</b> • {descs.join(', ')}\n    </div>\n}\n\nfunction TableConfig(\n    {table, isSelected, scrollTo, tableData, updateTableData}: \n    {table: Table, isSelected: boolean, scrollTo: (t: Table|null) => void, tableData: TableData, updateTableData: (t: TableData) => void}\n){\n    const [values, setValues] = React.useState(table.getValues(tableData));\n\n    const shouldExpand = (t: Table) => t.isDependenciesLoaded(tableData);\n    const [isExpanded, setIsExpanded] = React.useState(shouldExpand(table));\n\n    const elRef = React.useRef(null as HTMLDivElement|null);\n    React.useEffect(() => {\n        if (isSelected){\n            elRef.current?.scrollIntoView({behavior: 'smooth', block: 'start'});\n        }\n        setIsExpanded(true);\n        scrollTo(null);\n    }, [isSelected]);\n\n    React.useEffect(() => {\n        setIsExpanded(shouldExpand(table));\n    }, [shouldExpand(table)]);\n\n    React.useEffect(() => {\n        setValues(table.getValues(tableData));\n    }, [JSON.stringify(table.getValues(tableData))]);\n\n    return <div ref={elRef} className='table'>\n        <div className='tableHeader row clickable' onClick={() => setIsExpanded(!isExpanded)}>\n            <div className='tableChevronContainer'>\n                {isExpanded ? Icons.ChevronDown : Icons.ChevronUp}\n            </div>\n            <h2 className='centerAll'>{table.name}</h2>\n            <div className='spacer'></div>\n            <div className='tableAvailability centerAll'>\n                {table.isDependenciesLoaded(tableData) ? \n                    (table.isLoaded(tableData) ? Icons.CheckMark : Icons.PlusSign) : \n                    Icons.CrossSign\n                }\n            </div>\n        </div>\n        {!isExpanded ? null : <div className='tableConfig col'>\n            <div className='tableDesc'>\n                <p>{table.desc}</p>\n            </div>\n            {table.dependencies.length == 0 ? null : <div className='tableDependencies'>\n                <h3>Depends on:</h3>\n                <ul>\n                    {table.dependencies.map((t,i) => <li \n                        className='dependency row centerCross clickable'\n                        onClick={() => scrollTo(t)}\n                        key={i}\n                    >\n                        <p>{t.name} table</p>\n                        <div className='dependencyIcon row centerCross'>\n                            {t.isLoaded(tableData) ? Icons.CheckMark : Icons.CrossSign}\n                        </div>\n                    </li>)}\n                </ul>\n            </div>}\n            <div className='tableColumns'>\n                <h3>Columns:</h3>\n                <ul>\n                    {table.columns.map((c, i) => \n                        <li key={i}><ColumnConfig table={table} col={c}/></li>\n                    )}\n                </ul>\n            </div>\n            <div className='tableUpload col centerCross'>\n                <FileUpload table={table} tableData={tableData} updateTableData={updateTableData}/>\n                {table.isLoaded(tableData) ? <div className='tableTable'>\n                    <table>\n                        <thead><tr>\n                            {table.columns.map((c, i) => \n                                <th key={i}>{c.name}</th>\n                            )}\n                        </tr></thead>\n                        <tbody>{values.map((r, i) => \n                            <tr key={i}>{r.map((c, k) => \n                                <td key={k}>\n                                    {FormatColumn(c, table.columns[k].type)}\n                                </td>\n                            )} </tr>\n                        )}</tbody>\n                    </table>\n                </div> : null}\n            </div>\n        </div>}\n    </div>\n}\n\nfunction ConfigurationPage(\n        {tableData, updateTableData}: \n        {tableData: TableData, updateTableData: (tableData: TableData) => void}\n    ){\n\n    let [selectedTable, selectTable] = React.useState(null as Table|null);\n\n    return <div id='configPage'>\n        {tables.map(t => <TableConfig \n            key={t.name} \n            table={t} \n            isSelected={selectedTable == t} \n            scrollTo={(t: Table|null) => selectTable(t)}\n            tableData={tableData}\n            updateTableData={updateTableData}\n        />)}\n    </div>\n}\n\nexport default ConfigurationPage;","import { strictEqual } from 'assert';\nimport React from 'react';\nimport internal from 'stream';\nimport Icons from './Icons';\nimport './styles/Schedule.css';\nimport { CallAPIToJson, CallAPIJsonToJson, RestfulType, CallAPIJsonToDownloadCSV } from './Utilities';\n\ninterface IAttendee {\n    name: string;\n    commitments: IInterval[];\n    prefs: {[company: string]: number};\n}\n\ninterface IInterval {\n    start: string;\n    end: string;\n}\n\nclass Interval {\n    start: Date;\n    end: Date;\n    lengthMins: number;\n\n    constructor(start: Date, end: Date){\n        this.start = start;\n        this.end = end;\n        this.lengthMins = (+end - +start) / 1000 / 60;\n    }\n\n    static fromStr(intervalStr: IInterval): Interval {\n        return new Interval(\n            new Date(intervalStr.start),\n            new Date(intervalStr.end)\n        )\n    }\n}\n\ninterface IAppointment extends IInterval {\n    att?: number;\n    isCoffeeChat: boolean;\n    room: string;\n}\n\nclass Appointment {\n    att?: number;\n    companyName: string;\n    roomName: string;\n    interval: Interval;\n    isCoffeeChat: boolean;\n    iApp: IAppointment;\n\n    constructor(att: number|undefined, companyName: string, roomName: string, iApp: IAppointment){\n        this.att = att;\n        this.companyName = companyName;\n        this.roomName = roomName;\n        this.interval = Interval.fromStr(iApp);\n        this.isCoffeeChat = iApp.isCoffeeChat;\n        this.iApp = iApp;\n    }\n}\ninterface ICoffeeChat extends IInterval {\n    candidates: number[];\n    capcaity: number;\n}\n\ninterface IRoom {\n    apps: IAppointment[];\n    candidates: number[];\n    coffeeChat?: ICoffeeChat;\n}\n\ninterface ISchedule {\n    attendees: {[attId: number]: IAttendee};\n    companies: {[companyName: string]: {[roomName: string]: IRoom}};\n    conventionTimes: IInterval[];\n    totalUtility: number;\n    noAppointments: number;\n    noAppointmentsNotEmpty: number;\n    noAttendeeesChosen: number;\n    varNoAppointments: number;\n}\n\nfunction getCCPref(schedule: ISchedule, companyName: string, roomName: string, attId: number): number | null{\n    let ccCandidates = schedule.companies[companyName][roomName].coffeeChat?.candidates;\n    return ccCandidates ? ccCandidates.indexOf(attId) + 1 : null;\n}\n\nfunction addHours(date: Date, hours: number): Date {\n    let newDate = new Date(date);\n    newDate.setHours(date.getHours() + hours);\n    return newDate\n}\n\nfunction getHeadings(schedule: ISchedule): Date[]{\n    let conventionTimes = schedule.conventionTimes.map(\n        time => Interval.fromStr(time)\n    );\n\n    let headings = [];\n    for (let interval of conventionTimes){\n        for (let t = interval.start; t < interval.end; t = addHours(t, 1)){\n            headings.push(t);\n        }\n    }\n    return headings;\n}\n\nconst dateToTimeStr = (date: Date) => new Intl.DateTimeFormat(\n    'en-US', \n    { hour: 'numeric', minute: 'numeric', hour12: true }\n).format(date);\n\n\nfunction dateToStr(date: Date){\n    let time = dateToTimeStr(date);\n    let month = new Intl.DateTimeFormat('en-US', { month: 'short'}).format(date);\n    let day = date.getDate();\n    return `${month} ${day}, ${time}`;\n}\n\nvar ATT_TO_APPS: {[att: number]: Appointment[]} = {};\nvar ROOM_TO_COMPANY: {[room: string]: string} = {};\nvar ATT_TO_INTERVIEWROOMS: {[att: number]: Set<string>} = {};\nvar ATT_TO_COFFEECHATROOMS: {[att: number]: Set<string>} = {};\nvar ROOM_TO_COFFEECHATAPPS: {[room: string]: Appointment[]} = {};\n\nvar DRAGGING_APP: {\n    app: string|null, \n    room: string|null, \n    att: string|null, \n    time: string|null\n} = {\n    'app': null,\n    'room': null,\n    'att': null,\n    'time': null\n}\n\nfunction ScheduleCompany(\n    {schedule, swapFunc}: \n    {schedule: ISchedule, swapFunc: (isCoffeeChat: boolean, app1?: Object, att1?: number, app2?: Object, att2?: number) => void}\n){\n    let headings = getHeadings(schedule);\n    ATT_TO_APPS = {}; // empty out prev\n    ATT_TO_INTERVIEWROOMS = {};\n    ATT_TO_COFFEECHATROOMS = {};\n\n    ROOM_TO_COMPANY = {};\n    ROOM_TO_COFFEECHATAPPS = {};\n\n    function dragInterviewApp(ev: React.DragEvent<HTMLDivElement>) {\n        console.log('draggin');\n\n        let el = ev.target as any;\n        let attStr = el.dataset.att;\n        let timeStr = el.dataset.time;\n        let roomStr = el.dataset.room;\n        let appStr = el.dataset.app;\n\n        DRAGGING_APP.att = attStr ?? '';\n        DRAGGING_APP.time = timeStr ?? '';\n        DRAGGING_APP.room = roomStr ?? '';\n        DRAGGING_APP.app = appStr ?? '';\n\n        document.querySelectorAll(\n            `#scheduleCompany tbody tr:not([data-room='${roomStr}'])`\n        ).forEach(row => {\n            row.classList.add('fadeRoom');\n        });\n    }\n\n    function dropInterviewApp(ev: React.DragEvent<HTMLDivElement>) {\n        console.log('droppin');\n        ev.preventDefault();\n\n        let el = ev.currentTarget;\n        let attStr = el.dataset.att;\n        let timeStr = el.dataset.time;\n        let roomStr = el.dataset.room;\n        let appStr = el.dataset.app;\n\n        let otherAttStr = DRAGGING_APP.att;\n        let otherTimeStr = DRAGGING_APP.time;\n        let otherRoomStr = DRAGGING_APP.room;\n        let otherAppStr = DRAGGING_APP.app;\n\n        let room = roomStr || otherRoomStr;\n\n        let [att1, att2] = [attStr, otherAttStr].map(s => s ? parseInt(s) : undefined);\n        let [app1, app2] = [appStr, otherAppStr].map(s => s ? JSON.parse(s) : undefined);\n\n        let getAppStr = (att?: number, time?: string|null) => `${att ? `Attendee ${att}` : 'Appointment'}${time ? ` @ ${time}` : ''}`;\n\n        if (window.confirm(\n                (!att1 && !app1) ? \n                `Are you sure you want to move ${getAppStr(att2, otherTimeStr)} out of the schedule (to the extra column) for ${room}?` : \n                `Are you sure you want to swap ${getAppStr(att2, otherTimeStr)} with ${getAppStr(att1, timeStr)} for ${room}?`\n            )){\n            console.log('hi');\n            swapFunc(false, app1, att1, app2, att2);\n        }\n    }\n\n    function allowInterviewDrop(ev: any) {\n\n        let el = ev.target;\n        let attStr = el.dataset.att;\n        let timeStr = el.dataset.time;\n        let roomStr = el.dataset.room;\n        let appStr = el.dataset.app;\n\n        let otherAttStr = DRAGGING_APP.att;\n        let otherTimeStr = DRAGGING_APP.time;\n        let otherRoomStr = DRAGGING_APP.room;\n        let otherAppStr = DRAGGING_APP.app;\n\n        if (!(\n            (!timeStr && !otherTimeStr) ||\n            (timeStr == otherTimeStr) ||\n            (roomStr != otherRoomStr) ||\n            (!attStr && !otherAttStr) ||\n            (!appStr && !otherAppStr)\n        )){\n            // if these conditions are false, allow drag by preventDefault\n            ev.preventDefault();\n        }\n    }\n\n    function dragInterviewAppEnd(ev: any){\n        document.querySelectorAll(\"#scheduleCompany tbody tr.fadeRoom\").forEach(row => {\n            row.classList.remove('fadeRoom');\n        });\n    }\n\n    return <><h2>Interviews</h2><div id='scheduleCompany' className=\"scheduleTableContainer\">\n        <table>\n            <thead><tr>\n                <th id='roomNameCol'>Room Name</th>\n                {headings.map((time, i) => \n                    <th key={i}>{dateToStr(time)}</th>\n                )}\n                <th id='extra'>Extra</th>\n            </tr></thead>\n            <tbody>\n                {Object.entries(schedule.companies).map(([companyName, rooms]) => {\n                    return Object.entries(rooms).map(([roomName, room]) => {\n\n                        let timeToApp: {[time: number]: Appointment[]} = {};\n                        let addedInCoffeeChat = false;\n                        let i = 0;\n\n                        ROOM_TO_COMPANY[roomName] = companyName;\n\n                        let candidatesNotSelected = new Set(room.candidates);\n                        for (let attId of room.candidates){\n                            ATT_TO_INTERVIEWROOMS[attId] = ATT_TO_INTERVIEWROOMS[attId] || new Set();\n                            ATT_TO_INTERVIEWROOMS[attId].add(roomName);\n                        }\n                        if (room.coffeeChat){\n                            for (let attId of room.coffeeChat.candidates){\n                                ATT_TO_COFFEECHATROOMS[attId] = ATT_TO_COFFEECHATROOMS[attId] || new Set();\n                                ATT_TO_COFFEECHATROOMS[attId].add(roomName);\n                            } \n                        }\n                        /* as we iterate over apps, remove attendees who are selected */\n                        for (let iApp of room.apps) {\n                            let app = new Appointment(iApp.att, companyName, roomName, iApp);\n                            if (app.att != null){\n                                if (!app.isCoffeeChat){\n                                    candidatesNotSelected.delete(app.att);\n                                }\n                                ATT_TO_APPS[app.att] = [...(ATT_TO_APPS[app.att] || []), app];\n                            }\n                            if (app.isCoffeeChat){\n                                ROOM_TO_COFFEECHATAPPS[roomName] = [...(ROOM_TO_COFFEECHATAPPS[roomName] || []), app];\n                                if (addedInCoffeeChat){\n                                    continue; // only use one coffee chat\n                                } else {\n                                    addedInCoffeeChat = true;\n                                }\n                            }\n                            let interval = app.interval;\n\n                            for (;i < headings.length && addHours(headings[i], 1) <= interval.start; i++){}\n\n                            timeToApp[+headings[i]] = timeToApp[+headings[i]] || [];\n                            timeToApp[+headings[i]].push(app);\n                        }\n                        return <tr data-room={roomName}>\n                            <td>{roomName}</td>\n                            {headings.map(heading => <td key={+heading}>{\n                                (timeToApp[+heading] || []).map(app => {\n                                    let interval = app.interval;\n                                    let lengthPercent = (interval.lengthMins / 60) * 100;\n                                    let startPercent = (interval.start.getMinutes() / 60) * 100;\n                                    let att = app.att == null ? null : schedule.attendees[app.att!];\n                                    \n                                    return <div \n                                        className=\"appContainer centerAll\" style={{\n                                            left: `${startPercent}%`,\n                                            width: `${lengthPercent}%`\n                                        }}\n                                        key={roomName + interval.toString()}\n                                    >\n                                        <div\n                                            data-att={app.isCoffeeChat ? null : app.att}\n                                            data-time={dateToTimeStr(interval.start)} \n                                            data-room={roomName} \n                                            data-app={app.isCoffeeChat ? null : JSON.stringify(app.iApp as Object)}\n                                            className={`app col centerAll ${app.att ? '' : 'empty'} ${app.isCoffeeChat ? 'cc' : ''}`} \n                                            draggable={app.att != null && !app.isCoffeeChat}\n                                            onDragStart={app.isCoffeeChat ? ()=>{} : dragInterviewApp} \n                                            onDragEnd={app.isCoffeeChat ? ()=>{} : dragInterviewAppEnd}\n                                            onDrop={app.isCoffeeChat ? ()=>{} : dropInterviewApp} \n                                            onDragOver={app.isCoffeeChat ? ()=>{} : allowInterviewDrop}\n                                        >\n                                            {app.isCoffeeChat ? <div className='ccIcon'>{Icons.Coffee}</div> : null}\n                                            <div className='appLength'>{interval.lengthMins}m</div>\n                                            <span className='appAtt'>{app.isCoffeeChat ? 'coffee chat' : app.att || '?'}</span>\n                                            <span className='appTime'>{dateToTimeStr(interval.start)}</span>\n                                            <span className='appPref'>{att == null || app.isCoffeeChat ? null : `pref: ${att?.prefs[companyName]}`}</span>\n                                        </div>\n                                    </div>\n                                })\n                            }</td>)}\n                            <td><div className=\"row centerCross\">\n                                <div className=\"appContainer notSelected centerAll\">\n                                    <div \n                                        className={`app removeApp col centerAll`} \n                                        data-room={roomName} \n                                        onDrop={dropInterviewApp} \n                                        onDragOver={allowInterviewDrop}\n                                    >\n                                        <span className='appAtt'>remove</span>\n                                    </div>\n                                </div>\n                                {Array.from(candidatesNotSelected).map(attId => {\n                                    let att = schedule.attendees[attId];\n                                    return <div key={attId} className=\"appContainer notSelected centerAll\">\n                                        <div \n                                            className={`app col centerAll`} \n                                            draggable \n                                            data-att={attId} \n                                            data-room={roomName} \n                                            onDragStart={dragInterviewApp} \n                                            onDragEnd={dragInterviewAppEnd}\n                                            onDrop={dropInterviewApp} \n                                            onDragOver={allowInterviewDrop}\n                                        >   \n                                            <span className='appPref'>pref: {att.prefs[companyName]}</span>\n                                            <span className='appAtt'>{attId}</span>\n                                        </div>\n                                    </div>\n                                })}\n                            </div></td>\n                        </tr>\n                    })\n                })}\n            </tbody>\n        </table>\n    </div></>\n}\n\nfunction ScheduleCoffeeChat(\n    {schedule, swapFunc}: \n    {schedule: ISchedule, swapFunc: (isCoffeeChat: boolean, app1?: Object, att1?: number, app2?: Object, att2?: number) => void}\n){\n    function dragCCApp(ev: React.DragEvent<HTMLDivElement>) {\n        console.log('draggin');\n\n        let el = ev.target as any;\n        let attStr = el.dataset.att;\n        let timeStr = el.dataset.time;\n        let roomStr = el.dataset.room;\n        let appStr = el.dataset.app;\n\n        DRAGGING_APP.att = attStr ?? '';\n        DRAGGING_APP.time = timeStr ?? '';\n        DRAGGING_APP.room = roomStr ?? '';\n        DRAGGING_APP.app = appStr ?? '';\n\n        document.querySelectorAll(\n            `#scheduleCoffeeChat tbody tr:not([data-room='${roomStr}'])`\n        ).forEach(row => {\n            row.classList.add('fadeRoom');\n        });\n    }\n\n    function dropCCApp(ev: React.DragEvent<HTMLDivElement>) {\n        console.log('droppin');\n        ev.preventDefault();\n\n        let el = ev.currentTarget;\n        let attStr = el.dataset.att;\n        let timeStr = el.dataset.time;\n        let roomStr = el.dataset.room;\n        let appStr = el.dataset.app;\n\n        let otherAttStr = DRAGGING_APP.att;\n        let otherTimeStr = DRAGGING_APP.time;\n        let otherRoomStr = DRAGGING_APP.room;\n        let otherAppStr = DRAGGING_APP.app;\n\n        let room = roomStr || otherRoomStr;\n\n        let [att1, att2] = [attStr, otherAttStr].map(s => s ? parseInt(s) : undefined);\n        let [app1, app2] = [appStr, otherAppStr].map(s => s ? JSON.parse(s) : undefined);\n\n        let getAppStr = (att?: number, time?: string|null) => `${att ? `Attendee ${att}` : 'Appointment'}${time ? ` @ ${time}` : ''}`;\n\n        if (window.confirm(\n                (!att1 && !app1) ? \n                `Are you sure you want to move ${getAppStr(att2, otherTimeStr)} out of the schedule (to the extra column) for ${room}?` : \n                `Are you sure you want to swap ${getAppStr(att2, otherTimeStr)} with ${getAppStr(att1, timeStr)} for ${room}?`\n            )){\n            console.log('hi');\n            swapFunc(true, app1, att1, app2, att2);\n        }\n    }\n\n    function allowCCDrop(ev: any) {\n\n        let el = ev.target;\n        let attStr = el.dataset.att;\n        let timeStr = el.dataset.time;\n        let roomStr = el.dataset.room;\n        let appStr = el.dataset.app;\n\n        let otherAttStr = DRAGGING_APP.att;\n        let otherTimeStr = DRAGGING_APP.time;\n        let otherRoomStr = DRAGGING_APP.room;\n        let otherAppStr = DRAGGING_APP.app;\n\n        if (!(\n            (!timeStr && !otherTimeStr) ||\n            (timeStr == otherTimeStr) ||\n            (roomStr != otherRoomStr) ||\n            (!attStr && !otherAttStr) ||\n            (!appStr && !otherAppStr)\n        )){\n            // if these conditions are false, allow drag by preventDefault\n            ev.preventDefault();\n        }\n    }\n\n    function dragCCAppEnd(ev: any){\n        document.querySelectorAll(\"#scheduleCoffeeChat tbody tr.fadeRoom\").forEach(row => {\n            row.classList.remove('fadeRoom');\n        });\n    }\n\n    return <><h2>Coffee Chats</h2><div id='scheduleCoffeeChat' className=\"scheduleTableContainer\">\n        <table>\n            <thead><tr>\n                <th id='roomNameCol'>Room Name</th>\n                <th>Appointments</th>\n                <th id='extra'>Extra</th>\n            </tr></thead>\n            <tbody>\n                {Object.entries(schedule.companies).map(([companyName, rooms]) => {\n                    return Object.entries(rooms).map(([roomName, room]) => {\n                        let cc = room.coffeeChat;\n                        if (cc == null){\n                            return null;\n                        }       \n                        let interval = Interval.fromStr(cc);    \n                        \n                        let candidatesNotSelected = new Set(cc.candidates);\n                        return <tr data-room={roomName}>\n                            <td className=\"ccRowLabel\">\n                                <p className=\"ccRoomName\">{roomName}</p>\n                                <p className=\"ccRoomDate\">({dateToStr(interval.start)}, {dateToStr(interval.end)})</p>\n                            </td>\n                            <td><div className=\"row centerCross\">{room.apps.map(app => {\n                                if (!app.isCoffeeChat){ \n                                    return null; \n                                }\n                                let att = app.att == null ? null : schedule.attendees[app.att!];\n                                if (att != null){\n                                    candidatesNotSelected.delete(app.att!);\n                                }\n                                let ccPref = [cc, app.att].includes(undefined) ? null : getCCPref(schedule, companyName, roomName, app.att!); \n                                return <div className=\"appContainer centerAll\">\n                                    <div\n                                        data-att={app.att}\n                                        data-time={dateToTimeStr(interval.start)} \n                                        data-room={roomName} \n                                        data-app={JSON.stringify(app as Object)}\n                                        className={`app col centerAll ${app.att ? '' : 'empty'} cc`} \n                                        draggable={app.att != null}\n                                        onDragStart={dragCCApp} \n                                        onDragEnd={dragCCAppEnd}\n                                        onDrop={dropCCApp} \n                                        onDragOver={allowCCDrop}\n                                    >\n                                        <div className='ccIcon'>{Icons.Coffee}</div>\n                                        <div className='appLength'>{interval.lengthMins}m</div>\n                                        <span className='appAtt'>{app.att || '?'}</span>\n                                        <span className='appTime'>{dateToTimeStr(interval.start)}</span>\n                                        <span className='appPref'>{app.att == null ? null : `rank: ${ccPref}`}</span>\n                                        {/*<span className='appPref'>{app.att == null ? null : `pref: ${att?.prefs[companyName]}`}</span>*/}\n                                    </div>\n                                </div>\n                            })}</div></td>\n                            <td><div className=\"row centerCross\">\n                                <div className=\"appContainer notSelected centerAll\">\n                                    <div \n                                        className={`app removeApp col centerAll cc`} \n                                        data-room={roomName} \n                                        onDrop={dropCCApp} \n                                        onDragOver={allowCCDrop}\n                                    >\n                                        <span className='appAtt'>remove</span>\n                                    </div>\n                                </div>\n                                {Array.from(candidatesNotSelected).map(attId => {\n                                    let att = schedule.attendees[attId];\n                                    let ccPref = getCCPref(schedule, companyName, roomName, attId); \n                                    return <div key={attId} className=\"appContainer notSelected centerAll\">\n                                        <div \n                                            className={`app col centerAll cc`} \n                                            draggable \n                                            data-att={attId} \n                                            data-room={roomName} \n                                            onDragStart={dragCCApp} \n                                            onDragEnd={dragCCAppEnd}\n                                            onDrop={dropCCApp} \n                                            onDragOver={allowCCDrop}\n                                        >   \n                                            <div className='ccIcon'>{Icons.Coffee}</div>\n                                            <span className='appPref'>rank: {ccPref}</span>\n                                            {/*<span className='appPref'>pref: {att.prefs[companyName]}</span>*/}\n                                            <span className='appAtt'>{attId}</span>\n                                        </div>\n                                    </div>\n                                })}\n                            </div></td>\n                        </tr>\n                    })\n                })}\n                </tbody>\n        </table>\n    </div></>\n}\n\nfunction ScheduleAttendees(\n        {schedule,}: \n        {schedule: ISchedule}\n    ){\n\n    let headings = getHeadings(schedule);\n\n    return <><h2>Attendees</h2><div id='scheduleAttendee' className=\"scheduleTableContainer\">\n        <table>\n            <thead><tr>\n                <th id='roomNameCol'>Attendee</th>\n                {headings.map((time, i) => \n                    <th key={i}>{dateToStr(time)}</th>\n                )}\n                <th id='extra'>Extra</th>\n            </tr></thead>\n            <tbody>\n                {Object.entries(schedule.attendees).map(([attIdStr, att]) => {\n                    let timeToApp: {[time: number]: Appointment[]} = {};\n                    let timeToBreak: {[time: number]: Interval[]} = {};\n                    let attId = parseInt(attIdStr); // ts considers keys as string\n                    if ((\n                        (ATT_TO_INTERVIEWROOMS[attId] || new Set()).size + \n                        (ATT_TO_COFFEECHATROOMS[attId] || new Set()).size) == 0\n                    ){\n                        return;\n                    }\n\n                    let apps = ATT_TO_APPS[attId] || [];\n                    apps.sort((a,b) => +Interval.fromStr(a.iApp).start - +Interval.fromStr(b.iApp).start);\n\n                    let interviewRoomsNotSelected = new Set(ATT_TO_INTERVIEWROOMS[attId]);\n                    let coffeeChatRoomsNotSelected = new Set(ATT_TO_COFFEECHATROOMS[attId]);\n                    let i = 0;\n                    for (let app of apps) {\n                        if (app.att != null){\n                            let roomsNotSelected = app.isCoffeeChat ? coffeeChatRoomsNotSelected : interviewRoomsNotSelected;\n                            roomsNotSelected.delete(app.roomName);\n                        }\n                        let interval = Interval.fromStr(app.iApp);\n\n                        for (;i < headings.length && addHours(headings[i], 1) <= interval.start; i++){}\n\n                        timeToApp[+headings[i]] = timeToApp[+headings[i]] || [];\n                        timeToApp[+headings[i]].push(app);\n                    }\n                    i = 0;\n                    for (let breakStr of att.commitments) {\n                        let interval = Interval.fromStr(breakStr);\n\n                        for (;i < headings.length && addHours(headings[i], 1) <= interval.start; i++){}\n\n                        timeToBreak[+headings[i]] = timeToBreak[+headings[i]] || [];\n                        timeToBreak[+headings[i]].push(interval);\n                    }\n                    /* as we iterate over apps, remove companies who are selected */\n                    return <tr>\n                        <td>{attId}. {att.name}</td>\n                        {headings.map(heading =><td key={+heading}>{\n                            (timeToBreak[+heading] || []).map(interval => {\n                                let lengthPercent = (interval.lengthMins / 60) * 100;\n                                let startPercent = (interval.start.getMinutes() / 60) * 100;\n                                return <div \n                                    data-app={`${dateToStr(interval.start)} ${dateToStr(interval.end)}`} \n                                    className=\"appContainer centerAll\" style={{\n                                        left: `${startPercent}%`,\n                                        width: `${lengthPercent}%`\n                                    }}\n                                    key={attId + interval.toString()}\n                                >\n                                    <div className={`app col centerAll ${'empty'}`}>\n                                        <div className='appLength'>{interval.lengthMins}m</div>\n                                        <span className='appPref'></span>\n                                        <span className='appAtt'>{'break'}</span>\n                                        <span className='appTime'>{dateToTimeStr(interval.start)}</span>\n                                    </div>\n                                </div>\n                            })\n                        }{\n                            (timeToApp[+heading] || []).map(app => {\n                                let interval = Interval.fromStr(app.iApp);\n                                let lengthPercent = (interval.lengthMins / 60) * 100;\n                                let startPercent = (interval.start.getMinutes() / 60) * 100;\n                                let att = app.att == null ? null : schedule.attendees[app.att!];\n\n                                let ccPref = app.isCoffeeChat && app.att ? getCCPref(schedule, app.companyName, app.roomName, app.att!) : null;\n                                return <div \n                                    data-app={`${dateToStr(interval.start)} ${dateToStr(interval.end)}`} \n                                    className=\"appContainer centerAll\" style={{\n                                        left: `${startPercent}%`,\n                                        width: `${lengthPercent}%`\n                                    }}\n                                    key={attId + interval.toString()}\n                                >\n                                    <div className={`app col centerAll ${app.att ? '' : 'empty'} ${app.isCoffeeChat ? 'cc' : ''}`}>\n                                        {app.isCoffeeChat ? <div className='ccIcon'>{Icons.Coffee}</div> : null}\n                                        <div className='appLength'>{interval.lengthMins}m</div>\n                                        <span className='appAtt' title={app.roomName}>{app.roomName}</span>\n                                        <span className='appTime'>{dateToTimeStr(interval.start)}</span>\n                                        <span className='appPref'>{\n                                            att == null ? null : \n                                                app.isCoffeeChat ? `rank: ${ccPref}` : `pref: ${att?.prefs[app.companyName]}`\n                                        }</span>\n                                    </div>\n                                </div>\n                            })\n                        }</td>)}\n                        <td><div className=\"row\">{[false, true].map(isCoffeeChat => {\n                            let roomsNotSelected = isCoffeeChat ? coffeeChatRoomsNotSelected : interviewRoomsNotSelected;\n                            return Array.from(roomsNotSelected).map(roomName => {\n                                let companyName = ROOM_TO_COMPANY[roomName];\n                                let ccPref = isCoffeeChat ? getCCPref(schedule, companyName, roomName, attId) : null;\n                                return (\n                                    <div key={attId} className=\"appContainer notSelected centerAll\">\n                                        <div className={`app col centerAll ${isCoffeeChat ? 'cc' : ''}`}>\n                                            {isCoffeeChat ? <div className='ccIcon'>{Icons.Coffee}</div> : null}\n                                            <span className='appPref'>{\n                                                isCoffeeChat ? `rank: ${ccPref}` : `pref: ${att.prefs[companyName]}`\n                                            }</span>\n                                            <span className='appAtt'>{companyName}</span>\n                                        </div>\n                                    </div>\n                                )\n                            }\n                        )})}</div></td>\n                    </tr>\n                })}\n            </tbody>\n        </table>\n    </div></>\n}\n\nfunction SchedulePage(){\n\n    let [scheduleObj, setScheduleObj] = React.useState(null as ISchedule|null);\n    const [isLoading, setIsLoading] = React.useState(false);\n\n\tlet gen = () => {\n        setIsLoading(true);\n\t\tCallAPIToJson(\n            '/generateSchedule', \n            RestfulType.GET\n        ).then(({data}: {data: ISchedule}) => {\n            setScheduleObj(data);\n\t\t}).catch((res)=>{\n\t\t\tconsole.log(\"res\", res);\n\t\t\talert(res[\"error\"]);\n\t\t}).finally(()=>setIsLoading(false));\n\t}\n\n\tlet swap = (isCoffeeChat: boolean, app1?: Object, att1?: number, app2?: Object, att2?: number) => {\n        setIsLoading(true);\n\t\tCallAPIJsonToJson('/swapSchedule', RestfulType.POST, {\n            'data': {\n                ...(scheduleObj as Object),\n                'app1': app1 ?? null,\n                'att1': att1 ?? null,\n                'app2': app2 ?? null,\n                'att2': att2 ?? null,\n                'isCoffeeChat': isCoffeeChat\n            }\n        }).then(({data}: {data: ISchedule}) => {\n            setScheduleObj(data);\n\t\t}).catch((res)=>{\n\t\t\tconsole.log(\"res\", res);\n\t\t\talert(res[\"error\"]);\n\t\t}).finally(()=>setIsLoading(false));\n\t}\n\n\tlet writeSchedule = () => {\n        setIsLoading(true);\n\t\tCallAPIJsonToDownloadCSV(\n            '/writeSchedule', \n            RestfulType.POST, \n            {'data': scheduleObj}\n        ).finally(()=>setIsLoading(false));\n\t}\n\n    return <div id='schedulePage' className='col centerCross'>\n        <button id='generateButt' className='row centerAll' onClick={gen}>\n            {Icons.Generate}<p>generate schedule</p>\n        </button>\n        <div id='schedContainer' className=\"col centerCross\">\n            {isLoading ? <div id=\"schedLoader\" className=\"row centerAll\"><div className=\"loader\"></div></div> : null}\n            {(scheduleObj==null ? null : <>\n                    <div id='schedulesStats' className='row center'>\n                        <p>Appointments Filled: <span>{\n                            scheduleObj.noAppointmentsNotEmpty}/{scheduleObj.noAppointments\n                        }</span></p>\n                        <p>Avg No. Appointments: <span>{\n                            (scheduleObj.noAppointmentsNotEmpty/scheduleObj.noAttendeeesChosen).toFixed(2)\n                        }</span></p>\n                        <p>Var of No. Appointments: <span>{scheduleObj.varNoAppointments.toFixed(2)}</span></p>\n                        <p>Average Rank: <span>{(\n                            scheduleObj.totalUtility/scheduleObj.noAppointmentsNotEmpty).toFixed(2)\n                        }</span></p>\n                    </div>\n                    <div id='schedules'>\n                        <ScheduleCompany schedule={scheduleObj} swapFunc={swap}/>\n                        <ScheduleCoffeeChat schedule={scheduleObj} swapFunc={swap}/>\n                        <ScheduleAttendees schedule={scheduleObj}/>\n                    </div>\n                    <button id=\"writeScheduleButt\" className='row centerAll' onClick={writeSchedule}>\n                        {Icons.Edit}<p>write schedule</p>\n                    </button>\n                </>\n            )}\n        </div>\n    </div>\n}\n\nexport default SchedulePage;","import React from 'react';\nimport ConfigurationPage from './Configuration';\nimport SchedulePage from './Schedule';\nimport Icons from './Icons';\nimport './styles/App.css';\nimport './styles/Fonts.css';\nimport './styles/tailwindColours.css';\nimport { CallAPIToJson, RestfulType, Table, TableData, tables } from './Utilities';\n\nfunction App(){\n\n\tlet [configPageSelected, setConfigPageSelected] = React.useState(true);\n\tlet [canGenerate, setCanGenerate] = React.useState(false);\n\n    let tableDataInit: {[name: string]: any[]} = {};\n    for (let table of tables){\n        tableDataInit[table.name] = [];\n    }\n    let [tableData, setTableData] = React.useState(tableDataInit);\n\n    async function getData(table: Table): Promise<string[][]>{\n        return CallAPIToJson(`/get${table.endpoint}`, RestfulType.GET)\n            .then(({data}: {data: string[][]}) => data)\n            .catch((res)=>{\n                console.log(\"res\", res);\n                alert(res[\"error\"]);\n                return [];\n            });\n    }\n\n    async function updateTableData(tableDataOld: TableData){\n        for (let table of tables){\n            tableData[table.name] = await getData(table);\n        }\n        setTableData({...tableDataOld});\n    }\n\n    React.useEffect(() => {updateTableData(tableData)}, []); // call once on init\n\n\tReact.useEffect(() => {\n\t\tlet canGenerate = true;\n\t\tfor (let table of tables){\n\t\t\tif (table.mandatory && !table.isLoaded(tableData)){\n\t\t\t\tcanGenerate = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tsetCanGenerate(canGenerate);\t\n\t}, [tableData])\n\n\treturn (\n\t\t<div>\n\t\t\t<header>\n\t\t\t\t<div id='banner' className=\"row\">\n\t\t\t\t\t<div id='calendarContainer' className='centerAll'>\n\t\t\t\t\t\t{Icons.Calendar}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div id='titleContainer' className='spacer centerCross'>\n\t\t\t\t\t\t<h1 id=''>Interview Scheduling Tool</h1>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div id='navButtons' className='centerAll'>\n\t\t\t\t\t<button \n\t\t\t\t\t\tclassName={configPageSelected ? 'selected' : ''}\n\t\t\t\t\t\tonClick={() => setConfigPageSelected(true)}\n\t\t\t\t\t>Configuration</button>\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName={configPageSelected ? '' : 'selected'}\n\t\t\t\t\t\tdisabled={!canGenerate}\n\t\t\t\t\t\ttitle={canGenerate ? '' : 'mandatory tables not uploaded'}\n\t\t\t\t\t\tonClick={() => setConfigPageSelected(false)}\n\t\t\t\t\t>Schedule</button>\n\t\t\t\t</div>\n\t\t\t</header>\n\t\t\t<div>\n\t\t\t\t{configPageSelected ? <ConfigurationPage tableData={tableData} updateTableData={updateTableData}/> : <SchedulePage/>}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}